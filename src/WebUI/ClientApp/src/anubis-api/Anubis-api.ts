/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const ANUBIS_BASE_URL = new InjectionToken<string>('ANUBIS_BASE_URL');

export interface IExportClient {
    exportCompany(query: ExportAllCompanyQuery): Observable<FileResponse>;
    exportContact(query: ExportAllContactQuery): Observable<FileResponse>;
    exportFTL(query: ExportAllFTLQuery): Observable<FileResponse>;
    exportLTL(query: ExportAllLTLQuery): Observable<FileResponse>;
    exportFreightCode(query: ExportAllFreightCode): Observable<FileResponse>;
    exportLinkedClient(query: ExportAllCompanyLinkedClient): Observable<FileResponse>;
    exportHistoricFreightRates(query: ExportAllHistoricFreightRates): Observable<FileResponse>;
    exportApprovalPending(query: ExportAllApprovalPending): Observable<FileResponse>;
    exportRejectedShipments(query: ExportAllRejectedShipments): Observable<FileResponse>;
    exportTenderedShipments(query: ExportAllTenderedShipments): Observable<FileResponse>;
    exportApprovedInvoice(query: ExportAllApprovedInvoice): Observable<FileResponse>;
    exportApprovedRequiredInvoices(query: ExportAllApprovedRequiredInvoices): Observable<FileResponse>;
    exportWeight(query: ExportAllWeight): Observable<FileResponse>;
    exportMiles(query: ExportAllMiles): Observable<FileResponse>;
    exportAccessorial(query: ExportAllAccessorial): Observable<FileResponse>;
    exportTeamMembers(query: ExportAllTeamMember): Observable<FileResponse>;
    exportFTLLanes(query: ExportFTLLanes): Observable<FileResponse>;
    exportLTLLanes(query: ExportLTLLanes): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class ExportClient implements IExportClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(ANUBIS_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    exportCompany(query: ExportAllCompanyQuery): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportCompany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportCompany(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportCompany(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportContact(query: ExportAllContactQuery): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportContact(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportContact(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportContact(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportFTL(query: ExportAllFTLQuery): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportFTL";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportFTL(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportFTL(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportFTL(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportLTL(query: ExportAllLTLQuery): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportLTL";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportLTL(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportLTL(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportLTL(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportFreightCode(query: ExportAllFreightCode): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportFreightCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportFreightCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportFreightCode(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportFreightCode(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportLinkedClient(query: ExportAllCompanyLinkedClient): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportLinkedClient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportLinkedClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportLinkedClient(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportLinkedClient(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportHistoricFreightRates(query: ExportAllHistoricFreightRates): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportHistoricFreightRates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportHistoricFreightRates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportHistoricFreightRates(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportHistoricFreightRates(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportApprovalPending(query: ExportAllApprovalPending): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportApprovalPending";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportApprovalPending(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportApprovalPending(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportApprovalPending(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportRejectedShipments(query: ExportAllRejectedShipments): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportRejectedShipments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportRejectedShipments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportRejectedShipments(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportRejectedShipments(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportTenderedShipments(query: ExportAllTenderedShipments): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportTenderedShipments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportTenderedShipments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportTenderedShipments(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportTenderedShipments(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportApprovedInvoice(query: ExportAllApprovedInvoice): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportApprovedInvoice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportApprovedInvoice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportApprovedInvoice(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportApprovedInvoice(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportApprovedRequiredInvoices(query: ExportAllApprovedRequiredInvoices): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportApprovedRequiredInvoices";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportApprovedRequiredInvoices(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportApprovedRequiredInvoices(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportApprovedRequiredInvoices(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportWeight(query: ExportAllWeight): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportWeight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportWeight(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportWeight(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportWeight(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportMiles(query: ExportAllMiles): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportMiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportMiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportMiles(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportMiles(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportAccessorial(query: ExportAllAccessorial): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportAccessorial";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportAccessorial(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportAccessorial(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportAccessorial(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportTeamMembers(query: ExportAllTeamMember): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportTeamMembers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportTeamMembers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportTeamMembers(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportTeamMembers(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportFTLLanes(query: ExportFTLLanes): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportFTLLanes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportFTLLanes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportFTLLanes(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportFTLLanes(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    exportLTLLanes(query: ExportLTLLanes): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Export/ExportLTLLanes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportLTLLanes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportLTLLanes(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportLTLLanes(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IFreightCategoryClient {
    getCategories(query: GridCategoryQuery): Observable<GridResultOfFreightCategory>;
    addEditCategory(command: CreateCategoryCommand): Observable<Result>;
    removeCategory(command: RemoveCategoryCommand): Observable<Result>;
}

@Injectable({
    providedIn: 'root'
})
export class FreightCategoryClient implements IFreightCategoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(ANUBIS_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getCategories(query: GridCategoryQuery): Observable<GridResultOfFreightCategory> {
        let url_ = this.baseUrl + "/api/FreightCategory/GetCategories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCategories(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfFreightCategory>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfFreightCategory>><any>_observableThrow(response_);
        }));
    }

    protected processGetCategories(response: HttpResponseBase): Observable<GridResultOfFreightCategory> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfFreightCategory.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfFreightCategory>(<any>null);
    }

    addEditCategory(command: CreateCategoryCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCategory/AddEditCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEditCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEditCategory(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddEditCategory(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    removeCategory(command: RemoveCategoryCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCategory/RemoveCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveCategory(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveCategory(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }
}

export interface IFreightCompanyClient {
    getCompanys(query: GridCompanyQuery): Observable<GridResultOfFreightCompany>;
    editCompany(command: UpdateCompanyCommand): Observable<number>;
    addCompany(command: CreateCompanyCommand): Observable<number>;
    exportWG(query: ExportAllCompanyQuery): Observable<FileResponse>;
    getCompanyDetails(id: number): Observable<FreightCompanyEditDto>;
    getCompanyContacts(query: GridCompanyContactQuery): Observable<GridResultOfCompanyContactDto>;
    addCompanyContact(command: CreateCompanyContactCommand): Observable<Result>;
    removeContact(command: RemoveContactCommand): Observable<Result>;
    getCompanyBasicInformation(ddlFor: string | null | undefined): Observable<BasicInformationCompanyDto>;
    getFreightCodeList(company_Id: number | undefined): Observable<BasicInformationCompanyDto>;
    getFTL(query: GridFTLQuery): Observable<GridResultOfFtlDTO>;
    addEditFTL(command: CreateFTLCommand): Observable<Result>;
    activeDeleteFTL(command: RemoveAndDeactiveFTLCommand): Observable<Result>;
    getLTL(query: GridLTLQuery): Observable<GridResultOfLtlDto>;
    addEditLTL(command: CreateLTLCommand): Observable<Result>;
    activeDeleteLTL(command: RemoveAndDeactiveLTLCommand): Observable<Result>;
    getMiles(query: GridWGSMilesQuery): Observable<GridResultOfWGSMilesDto>;
    addEditWGSMiles(command: CreateWGSMilesCommand): Observable<Result>;
    getWeights(query: GridWGSWeightQuery): Observable<GridResultOfWGSCompanyWeights>;
    addEditWGSWeight(command: CreateWGSWeightCommand): Observable<Result>;
    getWGCGrid(query: GridWGSQuery): Observable<GridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice>;
    updateWGCPrice(command: UpdateWGSWeightPricesCommand): Observable<Result>;
    getFreightCompanyCodes(query: GridFreightCodeQuery): Observable<GridResultOfFreightCompanyCodes>;
    addEditFreightCode(command: FreightCodeCommand): Observable<Result>;
    removeCompanyCode(command: RemoveFreightCodeCommand): Observable<Result>;
    getWGSAccesrails(query: GridWGSAccesrailsQuery): Observable<GridResultOfWGSAccesrailsDto>;
    addEditWGSAccesrail(command: CreateWGSAccesrailsCommand): Observable<Result>;
    removeWGSAccesrail(command: RemoveWGSAccesrailsCommand): Observable<Result>;
    getLinkedClients(query: GridLinkedClientsQuery): Observable<GridResultOfCompanyLinkedClients>;
    getLinkedClientPreferences(query: GetLinkedClientDetailsQuery): Observable<LinkedClientDetailsDto>;
    addEditLinkedClinets(command: CreateLinkedClientsCommand): Observable<Result>;
    removeLinkedClient(command: RemoveLinkedClientCommand): Observable<Result>;
    insertLabourCost(command: InsertLabourQuoteCommand): Observable<Result>;
    getLabourCost(companyId: number | undefined): Observable<number>;
    getCompanyDocuments(query: GridCompanyDocumentsQuery): Observable<GridResultOfCompanyDocuments>;
    saveCompanyDocuments(command: CompanyDocumentsCommand): Observable<Result>;
    getHistoricFreightRates(query: GetHistoricFreightRatesQuery): Observable<GridResultOfFreightRates>;
    getPermissions(company_Id: number | undefined): Observable<LU_Permissions[]>;
    addUpdatePermissions(command: AddUpdatePermissionsCommand): Observable<Result>;
}

@Injectable({
    providedIn: 'root'
})
export class FreightCompanyClient implements IFreightCompanyClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(ANUBIS_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getCompanys(query: GridCompanyQuery): Observable<GridResultOfFreightCompany> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetCompanys";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompanys(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompanys(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfFreightCompany>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfFreightCompany>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompanys(response: HttpResponseBase): Observable<GridResultOfFreightCompany> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfFreightCompany.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfFreightCompany>(<any>null);
    }

    editCompany(command: UpdateCompanyCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/FreightCompany/EditCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditCompany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditCompany(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processEditCompany(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    addCompany(command: CreateCompanyCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/FreightCompany/AddCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddCompany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddCompany(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processAddCompany(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    exportWG(query: ExportAllCompanyQuery): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/FreightCompany/ExportWG";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportWG(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportWG(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportWG(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getCompanyDetails(id: number): Observable<FreightCompanyEditDto> {
        let url_ = this.baseUrl + "/api/FreightCompany/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompanyDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompanyDetails(<any>response_);
                } catch (e) {
                    return <Observable<FreightCompanyEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FreightCompanyEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompanyDetails(response: HttpResponseBase): Observable<FreightCompanyEditDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FreightCompanyEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FreightCompanyEditDto>(<any>null);
    }

    getCompanyContacts(query: GridCompanyContactQuery): Observable<GridResultOfCompanyContactDto> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetCompanyContacts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompanyContacts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompanyContacts(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfCompanyContactDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfCompanyContactDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompanyContacts(response: HttpResponseBase): Observable<GridResultOfCompanyContactDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfCompanyContactDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfCompanyContactDto>(<any>null);
    }

    addCompanyContact(command: CreateCompanyContactCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/AddCompanyContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddCompanyContact(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddCompanyContact(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddCompanyContact(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    removeContact(command: RemoveContactCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/RemoveContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveContact(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveContact(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveContact(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    getCompanyBasicInformation(ddlFor: string | null | undefined): Observable<BasicInformationCompanyDto> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetCompanyBasicInformation?";
        if (ddlFor !== undefined)
            url_ += "ddlFor=" + encodeURIComponent("" + ddlFor) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompanyBasicInformation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompanyBasicInformation(<any>response_);
                } catch (e) {
                    return <Observable<BasicInformationCompanyDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BasicInformationCompanyDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompanyBasicInformation(response: HttpResponseBase): Observable<BasicInformationCompanyDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BasicInformationCompanyDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BasicInformationCompanyDto>(<any>null);
    }

    getFreightCodeList(company_Id: number | undefined): Observable<BasicInformationCompanyDto> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetFreightCodeList?";
        if (company_Id === null)
            throw new Error("The parameter 'company_Id' cannot be null.");
        else if (company_Id !== undefined)
            url_ += "company_Id=" + encodeURIComponent("" + company_Id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFreightCodeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFreightCodeList(<any>response_);
                } catch (e) {
                    return <Observable<BasicInformationCompanyDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BasicInformationCompanyDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetFreightCodeList(response: HttpResponseBase): Observable<BasicInformationCompanyDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BasicInformationCompanyDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BasicInformationCompanyDto>(<any>null);
    }

    getFTL(query: GridFTLQuery): Observable<GridResultOfFtlDTO> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetFTL";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFTL(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFTL(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfFtlDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfFtlDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetFTL(response: HttpResponseBase): Observable<GridResultOfFtlDTO> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfFtlDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfFtlDTO>(<any>null);
    }

    addEditFTL(command: CreateFTLCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/AddEditFTL";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEditFTL(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEditFTL(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddEditFTL(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    activeDeleteFTL(command: RemoveAndDeactiveFTLCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/ActiveDeleteFTL";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processActiveDeleteFTL(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processActiveDeleteFTL(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processActiveDeleteFTL(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    getLTL(query: GridLTLQuery): Observable<GridResultOfLtlDto> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetLTL";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLTL(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLTL(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfLtlDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfLtlDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetLTL(response: HttpResponseBase): Observable<GridResultOfLtlDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfLtlDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfLtlDto>(<any>null);
    }

    addEditLTL(command: CreateLTLCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/AddEditLTL";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEditLTL(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEditLTL(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddEditLTL(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    activeDeleteLTL(command: RemoveAndDeactiveLTLCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/ActiveDeleteLTL";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processActiveDeleteLTL(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processActiveDeleteLTL(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processActiveDeleteLTL(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    getMiles(query: GridWGSMilesQuery): Observable<GridResultOfWGSMilesDto> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetMiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMiles(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfWGSMilesDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfWGSMilesDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMiles(response: HttpResponseBase): Observable<GridResultOfWGSMilesDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfWGSMilesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfWGSMilesDto>(<any>null);
    }

    addEditWGSMiles(command: CreateWGSMilesCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/AddEditWGSMiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEditWGSMiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEditWGSMiles(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddEditWGSMiles(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    getWeights(query: GridWGSWeightQuery): Observable<GridResultOfWGSCompanyWeights> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetWeights";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWeights(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWeights(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfWGSCompanyWeights>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfWGSCompanyWeights>><any>_observableThrow(response_);
        }));
    }

    protected processGetWeights(response: HttpResponseBase): Observable<GridResultOfWGSCompanyWeights> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfWGSCompanyWeights.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfWGSCompanyWeights>(<any>null);
    }

    addEditWGSWeight(command: CreateWGSWeightCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/AddEditWGSWeight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEditWGSWeight(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEditWGSWeight(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddEditWGSWeight(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    getWGCGrid(query: GridWGSQuery): Observable<GridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetWGCGrid";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWGCGrid(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWGCGrid(<any>response_);
                } catch (e) {
                    return <Observable<GridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice>><any>_observableThrow(response_);
        }));
    }

    protected processGetWGCGrid(response: HttpResponseBase): Observable<GridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice>(<any>null);
    }

    updateWGCPrice(command: UpdateWGSWeightPricesCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/UpdateWGCPrice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateWGCPrice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateWGCPrice(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateWGCPrice(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    getFreightCompanyCodes(query: GridFreightCodeQuery): Observable<GridResultOfFreightCompanyCodes> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetFreightCompanyCodes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFreightCompanyCodes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFreightCompanyCodes(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfFreightCompanyCodes>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfFreightCompanyCodes>><any>_observableThrow(response_);
        }));
    }

    protected processGetFreightCompanyCodes(response: HttpResponseBase): Observable<GridResultOfFreightCompanyCodes> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfFreightCompanyCodes.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfFreightCompanyCodes>(<any>null);
    }

    addEditFreightCode(command: FreightCodeCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/AddEditFreightCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEditFreightCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEditFreightCode(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddEditFreightCode(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    removeCompanyCode(command: RemoveFreightCodeCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/RemoveCompanyCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveCompanyCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveCompanyCode(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveCompanyCode(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    getWGSAccesrails(query: GridWGSAccesrailsQuery): Observable<GridResultOfWGSAccesrailsDto> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetWGSAccesrails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWGSAccesrails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWGSAccesrails(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfWGSAccesrailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfWGSAccesrailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetWGSAccesrails(response: HttpResponseBase): Observable<GridResultOfWGSAccesrailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfWGSAccesrailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfWGSAccesrailsDto>(<any>null);
    }

    addEditWGSAccesrail(command: CreateWGSAccesrailsCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/AddEditWGSAccesrail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEditWGSAccesrail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEditWGSAccesrail(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddEditWGSAccesrail(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    removeWGSAccesrail(command: RemoveWGSAccesrailsCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/RemoveWGSAccesrail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveWGSAccesrail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveWGSAccesrail(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveWGSAccesrail(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    getLinkedClients(query: GridLinkedClientsQuery): Observable<GridResultOfCompanyLinkedClients> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetLinkedClients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLinkedClients(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLinkedClients(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfCompanyLinkedClients>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfCompanyLinkedClients>><any>_observableThrow(response_);
        }));
    }

    protected processGetLinkedClients(response: HttpResponseBase): Observable<GridResultOfCompanyLinkedClients> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfCompanyLinkedClients.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfCompanyLinkedClients>(<any>null);
    }

    getLinkedClientPreferences(query: GetLinkedClientDetailsQuery): Observable<LinkedClientDetailsDto> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetLinkedClientPreferences";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLinkedClientPreferences(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLinkedClientPreferences(<any>response_);
                } catch (e) {
                    return <Observable<LinkedClientDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<LinkedClientDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetLinkedClientPreferences(response: HttpResponseBase): Observable<LinkedClientDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LinkedClientDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LinkedClientDetailsDto>(<any>null);
    }

    addEditLinkedClinets(command: CreateLinkedClientsCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/AddEditLinkedClinets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEditLinkedClinets(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEditLinkedClinets(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddEditLinkedClinets(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    removeLinkedClient(command: RemoveLinkedClientCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/RemoveLinkedClient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveLinkedClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveLinkedClient(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveLinkedClient(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    insertLabourCost(command: InsertLabourQuoteCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/InsertLabourCost";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertLabourCost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertLabourCost(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processInsertLabourCost(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    getLabourCost(companyId: number | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetLabourCost?";
        if (companyId === null)
            throw new Error("The parameter 'companyId' cannot be null.");
        else if (companyId !== undefined)
            url_ += "companyId=" + encodeURIComponent("" + companyId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLabourCost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLabourCost(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processGetLabourCost(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    getCompanyDocuments(query: GridCompanyDocumentsQuery): Observable<GridResultOfCompanyDocuments> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetCompanyDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompanyDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompanyDocuments(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfCompanyDocuments>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfCompanyDocuments>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompanyDocuments(response: HttpResponseBase): Observable<GridResultOfCompanyDocuments> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfCompanyDocuments.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfCompanyDocuments>(<any>null);
    }

    saveCompanyDocuments(command: CompanyDocumentsCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/SaveCompanyDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveCompanyDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveCompanyDocuments(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processSaveCompanyDocuments(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    getHistoricFreightRates(query: GetHistoricFreightRatesQuery): Observable<GridResultOfFreightRates> {
        let url_ = this.baseUrl + "/api/FreightCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHistoricFreightRates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHistoricFreightRates(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfFreightRates>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfFreightRates>><any>_observableThrow(response_);
        }));
    }

    protected processGetHistoricFreightRates(response: HttpResponseBase): Observable<GridResultOfFreightRates> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfFreightRates.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfFreightRates>(<any>null);
    }

    getPermissions(company_Id: number | undefined): Observable<LU_Permissions[]> {
        let url_ = this.baseUrl + "/api/FreightCompany/GetPermissions?";
        if (company_Id === null)
            throw new Error("The parameter 'company_Id' cannot be null.");
        else if (company_Id !== undefined)
            url_ += "Company_Id=" + encodeURIComponent("" + company_Id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPermissions(<any>response_);
                } catch (e) {
                    return <Observable<LU_Permissions[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<LU_Permissions[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPermissions(response: HttpResponseBase): Observable<LU_Permissions[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LU_Permissions.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LU_Permissions[]>(<any>null);
    }

    addUpdatePermissions(command: AddUpdatePermissionsCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/FreightCompany/AddUpdatePermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddUpdatePermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUpdatePermissions(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddUpdatePermissions(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }
}

export interface ITeamMemberClient {
    getAllTeamMembers(query: GetAllTeamMemberGridQuery): Observable<GridResultOfTeamMemberDto>;
    addUpdateTeamMember(command: AddUpdateTeamMemberCommand): Observable<Result>;
    removeTeamMember(command: RemoveTeamMemberCommand): Observable<Result>;
    getAllTeamMembersDDL(): Observable<OptionVm[]>;
    assignShipmentToTeamMember(command: AssignShipmentToTeamMemberCommand): Observable<Result>;
}

@Injectable({
    providedIn: 'root'
})
export class TeamMemberClient implements ITeamMemberClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(ANUBIS_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAllTeamMembers(query: GetAllTeamMemberGridQuery): Observable<GridResultOfTeamMemberDto> {
        let url_ = this.baseUrl + "/api/TeamMember/GetAllTeamMembers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllTeamMembers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllTeamMembers(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfTeamMemberDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfTeamMemberDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllTeamMembers(response: HttpResponseBase): Observable<GridResultOfTeamMemberDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfTeamMemberDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfTeamMemberDto>(<any>null);
    }

    addUpdateTeamMember(command: AddUpdateTeamMemberCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/TeamMember/AddUpdateTeamMember";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddUpdateTeamMember(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUpdateTeamMember(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddUpdateTeamMember(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    removeTeamMember(command: RemoveTeamMemberCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/TeamMember/RemoveTeamMember";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveTeamMember(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveTeamMember(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveTeamMember(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    getAllTeamMembersDDL(): Observable<OptionVm[]> {
        let url_ = this.baseUrl + "/api/TeamMember/GetAllTeamMembersDDL";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllTeamMembersDDL(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllTeamMembersDDL(<any>response_);
                } catch (e) {
                    return <Observable<OptionVm[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<OptionVm[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllTeamMembersDDL(response: HttpResponseBase): Observable<OptionVm[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OptionVm.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OptionVm[]>(<any>null);
    }

    assignShipmentToTeamMember(command: AssignShipmentToTeamMemberCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/TeamMember/AssignShipmentToTeamMember";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAssignShipmentToTeamMember(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssignShipmentToTeamMember(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAssignShipmentToTeamMember(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }
}

export class GridQuery implements IGridQuery {
    filter?: { [key: string]: string; } | undefined;
    sort?: string | undefined;
    ascending?: boolean;
    page?: number;
    pageSize?: number;
    id?: number;
    isNeedHelp?: boolean;

    constructor(data?: IGridQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["filter"]) {
                this.filter = {} as any;
                for (let key in _data["filter"]) {
                    if (_data["filter"].hasOwnProperty(key))
                        this.filter![key] = _data["filter"][key];
                }
            }
            this.sort = _data["sort"];
            this.ascending = _data["ascending"];
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.id = _data["id"];
            this.isNeedHelp = _data["isNeedHelp"];
        }
    }

    static fromJS(data: any): GridQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.filter) {
            data["filter"] = {};
            for (let key in this.filter) {
                if (this.filter.hasOwnProperty(key))
                    data["filter"][key] = this.filter[key];
            }
        }
        data["sort"] = this.sort;
        data["ascending"] = this.ascending;
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["id"] = this.id;
        data["isNeedHelp"] = this.isNeedHelp;
        return data; 
    }
}

export interface IGridQuery {
    filter?: { [key: string]: string; } | undefined;
    sort?: string | undefined;
    ascending?: boolean;
    page?: number;
    pageSize?: number;
    id?: number;
    isNeedHelp?: boolean;
}

export class ExportAllCompanyQuery extends GridQuery implements IExportAllCompanyQuery {

    constructor(data?: IExportAllCompanyQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllCompanyQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllCompanyQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllCompanyQuery extends IGridQuery {
}

export class ExportAllContactQuery extends GridQuery implements IExportAllContactQuery {

    constructor(data?: IExportAllContactQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllContactQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllContactQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllContactQuery extends IGridQuery {
}

export class ExportAllFTLQuery extends GridQuery implements IExportAllFTLQuery {

    constructor(data?: IExportAllFTLQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllFTLQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllFTLQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllFTLQuery extends IGridQuery {
}

export class ExportAllLTLQuery extends GridQuery implements IExportAllLTLQuery {

    constructor(data?: IExportAllLTLQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllLTLQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllLTLQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllLTLQuery extends IGridQuery {
}

export class ExportAllFreightCode extends GridQuery implements IExportAllFreightCode {

    constructor(data?: IExportAllFreightCode) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllFreightCode {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllFreightCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllFreightCode extends IGridQuery {
}

export class ExportAllCompanyLinkedClient extends GridQuery implements IExportAllCompanyLinkedClient {

    constructor(data?: IExportAllCompanyLinkedClient) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllCompanyLinkedClient {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllCompanyLinkedClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllCompanyLinkedClient extends IGridQuery {
}

export class ExportAllHistoricFreightRates extends GridQuery implements IExportAllHistoricFreightRates {

    constructor(data?: IExportAllHistoricFreightRates) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllHistoricFreightRates {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllHistoricFreightRates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllHistoricFreightRates extends IGridQuery {
}

export class ExportAllApprovalPending extends GridQuery implements IExportAllApprovalPending {

    constructor(data?: IExportAllApprovalPending) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllApprovalPending {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllApprovalPending();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllApprovalPending extends IGridQuery {
}

export class ExportAllRejectedShipments extends GridQuery implements IExportAllRejectedShipments {

    constructor(data?: IExportAllRejectedShipments) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllRejectedShipments {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllRejectedShipments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllRejectedShipments extends IGridQuery {
}

export class ExportAllTenderedShipments extends GridQuery implements IExportAllTenderedShipments {

    constructor(data?: IExportAllTenderedShipments) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllTenderedShipments {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllTenderedShipments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllTenderedShipments extends IGridQuery {
}

export class ExportAllApprovedInvoice extends GridQuery implements IExportAllApprovedInvoice {

    constructor(data?: IExportAllApprovedInvoice) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllApprovedInvoice {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllApprovedInvoice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllApprovedInvoice extends IGridQuery {
}

export class ExportAllApprovedRequiredInvoices extends GridQuery implements IExportAllApprovedRequiredInvoices {

    constructor(data?: IExportAllApprovedRequiredInvoices) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllApprovedRequiredInvoices {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllApprovedRequiredInvoices();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllApprovedRequiredInvoices extends IGridQuery {
}

export class ExportAllWeight extends GridQuery implements IExportAllWeight {

    constructor(data?: IExportAllWeight) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllWeight {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllWeight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllWeight extends IGridQuery {
}

export class ExportAllMiles extends GridQuery implements IExportAllMiles {

    constructor(data?: IExportAllMiles) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllMiles {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllMiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllMiles extends IGridQuery {
}

export class ExportAllAccessorial extends GridQuery implements IExportAllAccessorial {

    constructor(data?: IExportAllAccessorial) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllAccessorial {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllAccessorial();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllAccessorial extends IGridQuery {
}

export class ExportAllTeamMember extends GridQuery implements IExportAllTeamMember {

    constructor(data?: IExportAllTeamMember) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportAllTeamMember {
        data = typeof data === 'object' ? data : {};
        let result = new ExportAllTeamMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportAllTeamMember extends IGridQuery {
}

export class ExportFTLLanes extends GridQuery implements IExportFTLLanes {

    constructor(data?: IExportFTLLanes) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportFTLLanes {
        data = typeof data === 'object' ? data : {};
        let result = new ExportFTLLanes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportFTLLanes extends IGridQuery {
}

export class ExportLTLLanes extends GridQuery implements IExportLTLLanes {

    constructor(data?: IExportLTLLanes) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExportLTLLanes {
        data = typeof data === 'object' ? data : {};
        let result = new ExportLTLLanes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IExportLTLLanes extends IGridQuery {
}

export class GridResultOfFreightCategory implements IGridResultOfFreightCategory {
    data?: FreightCategory[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfFreightCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(FreightCategory.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfFreightCategory {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfFreightCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfFreightCategory {
    data?: FreightCategory[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export abstract class AuditableEntity implements IAuditableEntity {
    createdBy?: string | undefined;
    created?: Date;
    lastModifiedBy?: string | undefined;
    lastModified?: Date | undefined;

    constructor(data?: IAuditableEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdBy = _data["createdBy"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuditableEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'AuditableEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdBy"] = this.createdBy;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IAuditableEntity {
    createdBy?: string | undefined;
    created?: Date;
    lastModifiedBy?: string | undefined;
    lastModified?: Date | undefined;
}

export class FreightCategory extends AuditableEntity implements IFreightCategory {
    id?: number;
    name!: string;
    isDeleted?: boolean;
    freightCompanyCodes?: FreightCompanyCodes[] | undefined;

    constructor(data?: IFreightCategory) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isDeleted = _data["isDeleted"];
            if (Array.isArray(_data["freightCompanyCodes"])) {
                this.freightCompanyCodes = [] as any;
                for (let item of _data["freightCompanyCodes"])
                    this.freightCompanyCodes!.push(FreightCompanyCodes.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FreightCategory {
        data = typeof data === 'object' ? data : {};
        let result = new FreightCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isDeleted"] = this.isDeleted;
        if (Array.isArray(this.freightCompanyCodes)) {
            data["freightCompanyCodes"] = [];
            for (let item of this.freightCompanyCodes)
                data["freightCompanyCodes"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IFreightCategory extends IAuditableEntity {
    id?: number;
    name: string;
    isDeleted?: boolean;
    freightCompanyCodes?: FreightCompanyCodes[] | undefined;
}

export class FreightCompanyCodes extends AuditableEntity implements IFreightCompanyCodes {
    id?: number;
    freightCategory_Id?: number;
    company_Id?: number;
    name!: string;
    shortDescription!: string;
    description?: string | undefined;
    defaultPrice?: number;
    isDeleted?: boolean;
    wgsAccesrails?: WGSAccesrails[] | undefined;
    freightInvoiceItems?: FreightInvoiceItems[] | undefined;

    constructor(data?: IFreightCompanyCodes) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.freightCategory_Id = _data["freightCategory_Id"];
            this.company_Id = _data["company_Id"];
            this.name = _data["name"];
            this.shortDescription = _data["shortDescription"];
            this.description = _data["description"];
            this.defaultPrice = _data["defaultPrice"];
            this.isDeleted = _data["isDeleted"];
            if (Array.isArray(_data["wgsAccesrails"])) {
                this.wgsAccesrails = [] as any;
                for (let item of _data["wgsAccesrails"])
                    this.wgsAccesrails!.push(WGSAccesrails.fromJS(item));
            }
            if (Array.isArray(_data["freightInvoiceItems"])) {
                this.freightInvoiceItems = [] as any;
                for (let item of _data["freightInvoiceItems"])
                    this.freightInvoiceItems!.push(FreightInvoiceItems.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FreightCompanyCodes {
        data = typeof data === 'object' ? data : {};
        let result = new FreightCompanyCodes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["freightCategory_Id"] = this.freightCategory_Id;
        data["company_Id"] = this.company_Id;
        data["name"] = this.name;
        data["shortDescription"] = this.shortDescription;
        data["description"] = this.description;
        data["defaultPrice"] = this.defaultPrice;
        data["isDeleted"] = this.isDeleted;
        if (Array.isArray(this.wgsAccesrails)) {
            data["wgsAccesrails"] = [];
            for (let item of this.wgsAccesrails)
                data["wgsAccesrails"].push(item.toJSON());
        }
        if (Array.isArray(this.freightInvoiceItems)) {
            data["freightInvoiceItems"] = [];
            for (let item of this.freightInvoiceItems)
                data["freightInvoiceItems"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IFreightCompanyCodes extends IAuditableEntity {
    id?: number;
    freightCategory_Id?: number;
    company_Id?: number;
    name: string;
    shortDescription: string;
    description?: string | undefined;
    defaultPrice?: number;
    isDeleted?: boolean;
    wgsAccesrails?: WGSAccesrails[] | undefined;
    freightInvoiceItems?: FreightInvoiceItems[] | undefined;
}

export class WGSAccesrails extends AuditableEntity implements IWGSAccesrails {
    id?: number;
    company_Id?: number;
    freightCode_Id?: number;
    isFixedPrice?: boolean;
    isDeleted?: boolean;
    defaultPrice?: number;
    freightCompanyCodes?: FreightCompanyCodes | undefined;

    constructor(data?: IWGSAccesrails) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.freightCode_Id = _data["freightCode_Id"];
            this.isFixedPrice = _data["isFixedPrice"];
            this.isDeleted = _data["isDeleted"];
            this.defaultPrice = _data["defaultPrice"];
            this.freightCompanyCodes = _data["freightCompanyCodes"] ? FreightCompanyCodes.fromJS(_data["freightCompanyCodes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WGSAccesrails {
        data = typeof data === 'object' ? data : {};
        let result = new WGSAccesrails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["freightCode_Id"] = this.freightCode_Id;
        data["isFixedPrice"] = this.isFixedPrice;
        data["isDeleted"] = this.isDeleted;
        data["defaultPrice"] = this.defaultPrice;
        data["freightCompanyCodes"] = this.freightCompanyCodes ? this.freightCompanyCodes.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IWGSAccesrails extends IAuditableEntity {
    id?: number;
    company_Id?: number;
    freightCode_Id?: number;
    isFixedPrice?: boolean;
    isDeleted?: boolean;
    defaultPrice?: number;
    freightCompanyCodes?: FreightCompanyCodes | undefined;
}

export class FreightInvoiceItems extends AuditableEntity implements IFreightInvoiceItems {
    id?: number;
    freightInvoiceHeader_Id?: number;
    freightCode_Id?: number;
    freightCode?: string | undefined;
    freightDescription?: string | undefined;
    quantity?: number;
    price?: number;
    totalPrice?: number;
    isDeleted?: boolean;

    constructor(data?: IFreightInvoiceItems) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.freightInvoiceHeader_Id = _data["freightInvoiceHeader_Id"];
            this.freightCode_Id = _data["freightCode_Id"];
            this.freightCode = _data["freightCode"];
            this.freightDescription = _data["freightDescription"];
            this.quantity = _data["quantity"];
            this.price = _data["price"];
            this.totalPrice = _data["totalPrice"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): FreightInvoiceItems {
        data = typeof data === 'object' ? data : {};
        let result = new FreightInvoiceItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["freightInvoiceHeader_Id"] = this.freightInvoiceHeader_Id;
        data["freightCode_Id"] = this.freightCode_Id;
        data["freightCode"] = this.freightCode;
        data["freightDescription"] = this.freightDescription;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["totalPrice"] = this.totalPrice;
        data["isDeleted"] = this.isDeleted;
        super.toJSON(data);
        return data; 
    }
}

export interface IFreightInvoiceItems extends IAuditableEntity {
    id?: number;
    freightInvoiceHeader_Id?: number;
    freightCode_Id?: number;
    freightCode?: string | undefined;
    freightDescription?: string | undefined;
    quantity?: number;
    price?: number;
    totalPrice?: number;
    isDeleted?: boolean;
}

export class GridCategoryQuery extends GridQuery implements IGridCategoryQuery {

    constructor(data?: IGridCategoryQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GridCategoryQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridCategoryQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGridCategoryQuery extends IGridQuery {
}

export class Result implements IResult {
    info?: boolean;
    succeeded?: boolean;
    data?: any | undefined;
    errors?: string[] | undefined;
    invoiceDetailId?: number;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.info = _data["info"];
            this.succeeded = _data["succeeded"];
            this.data = _data["data"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
            this.invoiceDetailId = _data["invoiceDetailId"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["info"] = this.info;
        data["succeeded"] = this.succeeded;
        data["data"] = this.data;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        data["invoiceDetailId"] = this.invoiceDetailId;
        return data; 
    }
}

export interface IResult {
    info?: boolean;
    succeeded?: boolean;
    data?: any | undefined;
    errors?: string[] | undefined;
    invoiceDetailId?: number;
}

export class CreateCategoryCommand implements ICreateCategoryCommand {
    id?: number;
    name?: string | undefined;
    isDeleted?: boolean;

    constructor(data?: ICreateCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): CreateCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }
}

export interface ICreateCategoryCommand {
    id?: number;
    name?: string | undefined;
    isDeleted?: boolean;
}

export class RemoveCategoryCommand implements IRemoveCategoryCommand {
    id?: number;

    constructor(data?: IRemoveCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemoveCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IRemoveCategoryCommand {
    id?: number;
}

export class GridResultOfFreightCompany implements IGridResultOfFreightCompany {
    data?: FreightCompany[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfFreightCompany) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(FreightCompany.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfFreightCompany {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfFreightCompany();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfFreightCompany {
    data?: FreightCompany[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class FreightCompany extends AuditableEntity implements IFreightCompany {
    id?: number;
    name!: string;
    shortName!: string;
    phone?: string | undefined;
    fax?: string | undefined;
    tenderEmail!: string;
    isActive?: boolean;
    address?: string | undefined;
    address1?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    region?: string | undefined;
    country?: string | undefined;
    paymentMethod?: string | undefined;
    paymentTerm?: string | undefined;
    labourCost?: number;
    ftl?: boolean;
    ltl?: boolean;
    wgs?: boolean;
    companyContacts?: CompanyContact[] | undefined;
    ftL_Companys?: FTL_Company[] | undefined;
    ltL_Companys?: LTL_Company[] | undefined;
    wgsCompanyWeights?: WGSCompanyWeights[] | undefined;
    wgsCompanyMiles?: WGSCompanyMiles[] | undefined;
    freightCompanyCodes?: FreightCompanyCodes[] | undefined;
    wgsAccesrails?: WGSAccesrails[] | undefined;
    companyLinkedClients?: CompanyLinkedClients[] | undefined;
    companyDocuments?: CompanyDocuments[] | undefined;
    routes?: Route[] | undefined;
    freightPermissions?: FreightPermissions[] | undefined;

    constructor(data?: IFreightCompany) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.phone = _data["phone"];
            this.fax = _data["fax"];
            this.tenderEmail = _data["tenderEmail"];
            this.isActive = _data["isActive"];
            this.address = _data["address"];
            this.address1 = _data["address1"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.region = _data["region"];
            this.country = _data["country"];
            this.paymentMethod = _data["paymentMethod"];
            this.paymentTerm = _data["paymentTerm"];
            this.labourCost = _data["labourCost"];
            this.ftl = _data["ftl"];
            this.ltl = _data["ltl"];
            this.wgs = _data["wgs"];
            if (Array.isArray(_data["companyContacts"])) {
                this.companyContacts = [] as any;
                for (let item of _data["companyContacts"])
                    this.companyContacts!.push(CompanyContact.fromJS(item));
            }
            if (Array.isArray(_data["ftL_Companys"])) {
                this.ftL_Companys = [] as any;
                for (let item of _data["ftL_Companys"])
                    this.ftL_Companys!.push(FTL_Company.fromJS(item));
            }
            if (Array.isArray(_data["ltL_Companys"])) {
                this.ltL_Companys = [] as any;
                for (let item of _data["ltL_Companys"])
                    this.ltL_Companys!.push(LTL_Company.fromJS(item));
            }
            if (Array.isArray(_data["wgsCompanyWeights"])) {
                this.wgsCompanyWeights = [] as any;
                for (let item of _data["wgsCompanyWeights"])
                    this.wgsCompanyWeights!.push(WGSCompanyWeights.fromJS(item));
            }
            if (Array.isArray(_data["wgsCompanyMiles"])) {
                this.wgsCompanyMiles = [] as any;
                for (let item of _data["wgsCompanyMiles"])
                    this.wgsCompanyMiles!.push(WGSCompanyMiles.fromJS(item));
            }
            if (Array.isArray(_data["freightCompanyCodes"])) {
                this.freightCompanyCodes = [] as any;
                for (let item of _data["freightCompanyCodes"])
                    this.freightCompanyCodes!.push(FreightCompanyCodes.fromJS(item));
            }
            if (Array.isArray(_data["wgsAccesrails"])) {
                this.wgsAccesrails = [] as any;
                for (let item of _data["wgsAccesrails"])
                    this.wgsAccesrails!.push(WGSAccesrails.fromJS(item));
            }
            if (Array.isArray(_data["companyLinkedClients"])) {
                this.companyLinkedClients = [] as any;
                for (let item of _data["companyLinkedClients"])
                    this.companyLinkedClients!.push(CompanyLinkedClients.fromJS(item));
            }
            if (Array.isArray(_data["companyDocuments"])) {
                this.companyDocuments = [] as any;
                for (let item of _data["companyDocuments"])
                    this.companyDocuments!.push(CompanyDocuments.fromJS(item));
            }
            if (Array.isArray(_data["routes"])) {
                this.routes = [] as any;
                for (let item of _data["routes"])
                    this.routes!.push(Route.fromJS(item));
            }
            if (Array.isArray(_data["freightPermissions"])) {
                this.freightPermissions = [] as any;
                for (let item of _data["freightPermissions"])
                    this.freightPermissions!.push(FreightPermissions.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FreightCompany {
        data = typeof data === 'object' ? data : {};
        let result = new FreightCompany();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        data["tenderEmail"] = this.tenderEmail;
        data["isActive"] = this.isActive;
        data["address"] = this.address;
        data["address1"] = this.address1;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["region"] = this.region;
        data["country"] = this.country;
        data["paymentMethod"] = this.paymentMethod;
        data["paymentTerm"] = this.paymentTerm;
        data["labourCost"] = this.labourCost;
        data["ftl"] = this.ftl;
        data["ltl"] = this.ltl;
        data["wgs"] = this.wgs;
        if (Array.isArray(this.companyContacts)) {
            data["companyContacts"] = [];
            for (let item of this.companyContacts)
                data["companyContacts"].push(item.toJSON());
        }
        if (Array.isArray(this.ftL_Companys)) {
            data["ftL_Companys"] = [];
            for (let item of this.ftL_Companys)
                data["ftL_Companys"].push(item.toJSON());
        }
        if (Array.isArray(this.ltL_Companys)) {
            data["ltL_Companys"] = [];
            for (let item of this.ltL_Companys)
                data["ltL_Companys"].push(item.toJSON());
        }
        if (Array.isArray(this.wgsCompanyWeights)) {
            data["wgsCompanyWeights"] = [];
            for (let item of this.wgsCompanyWeights)
                data["wgsCompanyWeights"].push(item.toJSON());
        }
        if (Array.isArray(this.wgsCompanyMiles)) {
            data["wgsCompanyMiles"] = [];
            for (let item of this.wgsCompanyMiles)
                data["wgsCompanyMiles"].push(item.toJSON());
        }
        if (Array.isArray(this.freightCompanyCodes)) {
            data["freightCompanyCodes"] = [];
            for (let item of this.freightCompanyCodes)
                data["freightCompanyCodes"].push(item.toJSON());
        }
        if (Array.isArray(this.wgsAccesrails)) {
            data["wgsAccesrails"] = [];
            for (let item of this.wgsAccesrails)
                data["wgsAccesrails"].push(item.toJSON());
        }
        if (Array.isArray(this.companyLinkedClients)) {
            data["companyLinkedClients"] = [];
            for (let item of this.companyLinkedClients)
                data["companyLinkedClients"].push(item.toJSON());
        }
        if (Array.isArray(this.companyDocuments)) {
            data["companyDocuments"] = [];
            for (let item of this.companyDocuments)
                data["companyDocuments"].push(item.toJSON());
        }
        if (Array.isArray(this.routes)) {
            data["routes"] = [];
            for (let item of this.routes)
                data["routes"].push(item.toJSON());
        }
        if (Array.isArray(this.freightPermissions)) {
            data["freightPermissions"] = [];
            for (let item of this.freightPermissions)
                data["freightPermissions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IFreightCompany extends IAuditableEntity {
    id?: number;
    name: string;
    shortName: string;
    phone?: string | undefined;
    fax?: string | undefined;
    tenderEmail: string;
    isActive?: boolean;
    address?: string | undefined;
    address1?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    region?: string | undefined;
    country?: string | undefined;
    paymentMethod?: string | undefined;
    paymentTerm?: string | undefined;
    labourCost?: number;
    ftl?: boolean;
    ltl?: boolean;
    wgs?: boolean;
    companyContacts?: CompanyContact[] | undefined;
    ftL_Companys?: FTL_Company[] | undefined;
    ltL_Companys?: LTL_Company[] | undefined;
    wgsCompanyWeights?: WGSCompanyWeights[] | undefined;
    wgsCompanyMiles?: WGSCompanyMiles[] | undefined;
    freightCompanyCodes?: FreightCompanyCodes[] | undefined;
    wgsAccesrails?: WGSAccesrails[] | undefined;
    companyLinkedClients?: CompanyLinkedClients[] | undefined;
    companyDocuments?: CompanyDocuments[] | undefined;
    routes?: Route[] | undefined;
    freightPermissions?: FreightPermissions[] | undefined;
}

export class CompanyContact extends AuditableEntity implements ICompanyContact {
    id?: number;
    company_Id?: number;
    contactType_Id?: number;
    fName?: string | undefined;
    lName?: string | undefined;
    title?: string | undefined;
    mobile?: string | undefined;
    fax?: string | undefined;
    ext?: string | undefined;
    email?: string | undefined;
    notes?: string | undefined;
    isDeleted?: boolean | undefined;
    createdDate?: Date;

    constructor(data?: ICompanyContact) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.contactType_Id = _data["contactType_Id"];
            this.fName = _data["fName"];
            this.lName = _data["lName"];
            this.title = _data["title"];
            this.mobile = _data["mobile"];
            this.fax = _data["fax"];
            this.ext = _data["ext"];
            this.email = _data["email"];
            this.notes = _data["notes"];
            this.isDeleted = _data["isDeleted"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CompanyContact {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyContact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["contactType_Id"] = this.contactType_Id;
        data["fName"] = this.fName;
        data["lName"] = this.lName;
        data["title"] = this.title;
        data["mobile"] = this.mobile;
        data["fax"] = this.fax;
        data["ext"] = this.ext;
        data["email"] = this.email;
        data["notes"] = this.notes;
        data["isDeleted"] = this.isDeleted;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ICompanyContact extends IAuditableEntity {
    id?: number;
    company_Id?: number;
    contactType_Id?: number;
    fName?: string | undefined;
    lName?: string | undefined;
    title?: string | undefined;
    mobile?: string | undefined;
    fax?: string | undefined;
    ext?: string | undefined;
    email?: string | undefined;
    notes?: string | undefined;
    isDeleted?: boolean | undefined;
    createdDate?: Date;
}

export class FTL_Company extends AuditableEntity implements IFTL_Company {
    id?: number;
    company_Id?: number;
    originCity!: string;
    destinationCity!: string;
    originState!: string;
    destinationState!: string;
    price?: number;
    isActive?: boolean;
    isDeleted?: boolean;
    truck_Id?: number | undefined;
    truck?: LU_Truck | undefined;

    constructor(data?: IFTL_Company) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.originCity = _data["originCity"];
            this.destinationCity = _data["destinationCity"];
            this.originState = _data["originState"];
            this.destinationState = _data["destinationState"];
            this.price = _data["price"];
            this.isActive = _data["isActive"];
            this.isDeleted = _data["isDeleted"];
            this.truck_Id = _data["truck_Id"];
            this.truck = _data["truck"] ? LU_Truck.fromJS(_data["truck"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FTL_Company {
        data = typeof data === 'object' ? data : {};
        let result = new FTL_Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["originCity"] = this.originCity;
        data["destinationCity"] = this.destinationCity;
        data["originState"] = this.originState;
        data["destinationState"] = this.destinationState;
        data["price"] = this.price;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        data["truck_Id"] = this.truck_Id;
        data["truck"] = this.truck ? this.truck.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IFTL_Company extends IAuditableEntity {
    id?: number;
    company_Id?: number;
    originCity: string;
    destinationCity: string;
    originState: string;
    destinationState: string;
    price?: number;
    isActive?: boolean;
    isDeleted?: boolean;
    truck_Id?: number | undefined;
    truck?: LU_Truck | undefined;
}

export class LU_Truck extends AuditableEntity implements ILU_Truck {
    id?: number;
    name?: string | undefined;
    active?: boolean;
    ftL_Companies?: FTL_Company[] | undefined;
    ltL_Companies?: LTL_Company[] | undefined;
    wgS_CompanyMiles?: WGSCompanyMiles[] | undefined;

    constructor(data?: ILU_Truck) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.active = _data["active"];
            if (Array.isArray(_data["ftL_Companies"])) {
                this.ftL_Companies = [] as any;
                for (let item of _data["ftL_Companies"])
                    this.ftL_Companies!.push(FTL_Company.fromJS(item));
            }
            if (Array.isArray(_data["ltL_Companies"])) {
                this.ltL_Companies = [] as any;
                for (let item of _data["ltL_Companies"])
                    this.ltL_Companies!.push(LTL_Company.fromJS(item));
            }
            if (Array.isArray(_data["wgS_CompanyMiles"])) {
                this.wgS_CompanyMiles = [] as any;
                for (let item of _data["wgS_CompanyMiles"])
                    this.wgS_CompanyMiles!.push(WGSCompanyMiles.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LU_Truck {
        data = typeof data === 'object' ? data : {};
        let result = new LU_Truck();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["active"] = this.active;
        if (Array.isArray(this.ftL_Companies)) {
            data["ftL_Companies"] = [];
            for (let item of this.ftL_Companies)
                data["ftL_Companies"].push(item.toJSON());
        }
        if (Array.isArray(this.ltL_Companies)) {
            data["ltL_Companies"] = [];
            for (let item of this.ltL_Companies)
                data["ltL_Companies"].push(item.toJSON());
        }
        if (Array.isArray(this.wgS_CompanyMiles)) {
            data["wgS_CompanyMiles"] = [];
            for (let item of this.wgS_CompanyMiles)
                data["wgS_CompanyMiles"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ILU_Truck extends IAuditableEntity {
    id?: number;
    name?: string | undefined;
    active?: boolean;
    ftL_Companies?: FTL_Company[] | undefined;
    ltL_Companies?: LTL_Company[] | undefined;
    wgS_CompanyMiles?: WGSCompanyMiles[] | undefined;
}

export class LTL_Company extends AuditableEntity implements ILTL_Company {
    id?: number;
    company_Id?: number;
    originCity?: string | undefined;
    destinationCity?: string | undefined;
    originState?: string | undefined;
    destinationState?: string | undefined;
    isActive?: boolean;
    isDeleted?: boolean;
    pPrice1?: number;
    pPrice2?: number;
    pPrice3?: number;
    pPrice4?: number;
    pPrice5?: number;
    pPrice6?: number;
    pPrice7?: number;
    pPrice8?: number;
    pPrice9?: number;
    pPrice10?: number;
    truck_Id?: number | undefined;
    truck?: LU_Truck | undefined;

    constructor(data?: ILTL_Company) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.originCity = _data["originCity"];
            this.destinationCity = _data["destinationCity"];
            this.originState = _data["originState"];
            this.destinationState = _data["destinationState"];
            this.isActive = _data["isActive"];
            this.isDeleted = _data["isDeleted"];
            this.pPrice1 = _data["pPrice1"];
            this.pPrice2 = _data["pPrice2"];
            this.pPrice3 = _data["pPrice3"];
            this.pPrice4 = _data["pPrice4"];
            this.pPrice5 = _data["pPrice5"];
            this.pPrice6 = _data["pPrice6"];
            this.pPrice7 = _data["pPrice7"];
            this.pPrice8 = _data["pPrice8"];
            this.pPrice9 = _data["pPrice9"];
            this.pPrice10 = _data["pPrice10"];
            this.truck_Id = _data["truck_Id"];
            this.truck = _data["truck"] ? LU_Truck.fromJS(_data["truck"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LTL_Company {
        data = typeof data === 'object' ? data : {};
        let result = new LTL_Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["originCity"] = this.originCity;
        data["destinationCity"] = this.destinationCity;
        data["originState"] = this.originState;
        data["destinationState"] = this.destinationState;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        data["pPrice1"] = this.pPrice1;
        data["pPrice2"] = this.pPrice2;
        data["pPrice3"] = this.pPrice3;
        data["pPrice4"] = this.pPrice4;
        data["pPrice5"] = this.pPrice5;
        data["pPrice6"] = this.pPrice6;
        data["pPrice7"] = this.pPrice7;
        data["pPrice8"] = this.pPrice8;
        data["pPrice9"] = this.pPrice9;
        data["pPrice10"] = this.pPrice10;
        data["truck_Id"] = this.truck_Id;
        data["truck"] = this.truck ? this.truck.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ILTL_Company extends IAuditableEntity {
    id?: number;
    company_Id?: number;
    originCity?: string | undefined;
    destinationCity?: string | undefined;
    originState?: string | undefined;
    destinationState?: string | undefined;
    isActive?: boolean;
    isDeleted?: boolean;
    pPrice1?: number;
    pPrice2?: number;
    pPrice3?: number;
    pPrice4?: number;
    pPrice5?: number;
    pPrice6?: number;
    pPrice7?: number;
    pPrice8?: number;
    pPrice9?: number;
    pPrice10?: number;
    truck_Id?: number | undefined;
    truck?: LU_Truck | undefined;
}

export class WGSCompanyMiles extends AuditableEntity implements IWGSCompanyMiles {
    id?: number;
    company_Id?: number;
    from?: number;
    price?: number;
    to?: number;
    labelValue?: string | undefined;
    isDeleted?: boolean;
    truck_Id?: number | undefined;
    truck?: LU_Truck | undefined;

    constructor(data?: IWGSCompanyMiles) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.from = _data["from"];
            this.price = _data["price"];
            this.to = _data["to"];
            this.labelValue = _data["labelValue"];
            this.isDeleted = _data["isDeleted"];
            this.truck_Id = _data["truck_Id"];
            this.truck = _data["truck"] ? LU_Truck.fromJS(_data["truck"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WGSCompanyMiles {
        data = typeof data === 'object' ? data : {};
        let result = new WGSCompanyMiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["from"] = this.from;
        data["price"] = this.price;
        data["to"] = this.to;
        data["labelValue"] = this.labelValue;
        data["isDeleted"] = this.isDeleted;
        data["truck_Id"] = this.truck_Id;
        data["truck"] = this.truck ? this.truck.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IWGSCompanyMiles extends IAuditableEntity {
    id?: number;
    company_Id?: number;
    from?: number;
    price?: number;
    to?: number;
    labelValue?: string | undefined;
    isDeleted?: boolean;
    truck_Id?: number | undefined;
    truck?: LU_Truck | undefined;
}

export class WGSCompanyWeights extends AuditableEntity implements IWGSCompanyWeights {
    id?: number;
    company_Id?: number;
    from?: number;
    to?: number;
    labelValue?: string | undefined;
    isDeleted?: boolean;
    wgsCompanyPrice?: WGSCompanyPrice[] | undefined;

    constructor(data?: IWGSCompanyWeights) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.from = _data["from"];
            this.to = _data["to"];
            this.labelValue = _data["labelValue"];
            this.isDeleted = _data["isDeleted"];
            if (Array.isArray(_data["wgsCompanyPrice"])) {
                this.wgsCompanyPrice = [] as any;
                for (let item of _data["wgsCompanyPrice"])
                    this.wgsCompanyPrice!.push(WGSCompanyPrice.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WGSCompanyWeights {
        data = typeof data === 'object' ? data : {};
        let result = new WGSCompanyWeights();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["from"] = this.from;
        data["to"] = this.to;
        data["labelValue"] = this.labelValue;
        data["isDeleted"] = this.isDeleted;
        if (Array.isArray(this.wgsCompanyPrice)) {
            data["wgsCompanyPrice"] = [];
            for (let item of this.wgsCompanyPrice)
                data["wgsCompanyPrice"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IWGSCompanyWeights extends IAuditableEntity {
    id?: number;
    company_Id?: number;
    from?: number;
    to?: number;
    labelValue?: string | undefined;
    isDeleted?: boolean;
    wgsCompanyPrice?: WGSCompanyPrice[] | undefined;
}

export class WGSCompanyPrice extends AuditableEntity implements IWGSCompanyPrice {
    id?: number;
    company_Id?: number;
    companyWGSWeight_Id?: number;
    companyWGSMiles_Id?: number;
    price?: number;
    isDeleted?: boolean;

    constructor(data?: IWGSCompanyPrice) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.companyWGSWeight_Id = _data["companyWGSWeight_Id"];
            this.companyWGSMiles_Id = _data["companyWGSMiles_Id"];
            this.price = _data["price"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): WGSCompanyPrice {
        data = typeof data === 'object' ? data : {};
        let result = new WGSCompanyPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["companyWGSWeight_Id"] = this.companyWGSWeight_Id;
        data["companyWGSMiles_Id"] = this.companyWGSMiles_Id;
        data["price"] = this.price;
        data["isDeleted"] = this.isDeleted;
        super.toJSON(data);
        return data; 
    }
}

export interface IWGSCompanyPrice extends IAuditableEntity {
    id?: number;
    company_Id?: number;
    companyWGSWeight_Id?: number;
    companyWGSMiles_Id?: number;
    price?: number;
    isDeleted?: boolean;
}

export class CompanyLinkedClients extends AuditableEntity implements ICompanyLinkedClients {
    id?: number;
    company_Id?: number;
    clientId?: number;
    clientName!: string;
    collectionId?: number;
    collectionName?: string | undefined;
    scheduleFrequency?: string | undefined;
    isPrimary?: boolean;
    isSecondary?: boolean;
    approvalRequired?: boolean;
    isDeleted?: boolean;
    transportDays?: number;
    fromTime?: string | undefined;
    toTime?: string | undefined;
    freightType?: string | undefined;
    _FreightCompany?: FreightCompany | undefined;

    constructor(data?: ICompanyLinkedClients) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.collectionId = _data["collectionId"];
            this.collectionName = _data["collectionName"];
            this.scheduleFrequency = _data["scheduleFrequency"];
            this.isPrimary = _data["isPrimary"];
            this.isSecondary = _data["isSecondary"];
            this.approvalRequired = _data["approvalRequired"];
            this.isDeleted = _data["isDeleted"];
            this.transportDays = _data["transportDays"];
            this.fromTime = _data["fromTime"];
            this.toTime = _data["toTime"];
            this.freightType = _data["freightType"];
            this._FreightCompany = _data["_FreightCompany"] ? FreightCompany.fromJS(_data["_FreightCompany"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CompanyLinkedClients {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyLinkedClients();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["collectionId"] = this.collectionId;
        data["collectionName"] = this.collectionName;
        data["scheduleFrequency"] = this.scheduleFrequency;
        data["isPrimary"] = this.isPrimary;
        data["isSecondary"] = this.isSecondary;
        data["approvalRequired"] = this.approvalRequired;
        data["isDeleted"] = this.isDeleted;
        data["transportDays"] = this.transportDays;
        data["fromTime"] = this.fromTime;
        data["toTime"] = this.toTime;
        data["freightType"] = this.freightType;
        data["_FreightCompany"] = this._FreightCompany ? this._FreightCompany.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ICompanyLinkedClients extends IAuditableEntity {
    id?: number;
    company_Id?: number;
    clientId?: number;
    clientName: string;
    collectionId?: number;
    collectionName?: string | undefined;
    scheduleFrequency?: string | undefined;
    isPrimary?: boolean;
    isSecondary?: boolean;
    approvalRequired?: boolean;
    isDeleted?: boolean;
    transportDays?: number;
    fromTime?: string | undefined;
    toTime?: string | undefined;
    freightType?: string | undefined;
    _FreightCompany?: FreightCompany | undefined;
}

export class CompanyDocuments extends AuditableEntity implements ICompanyDocuments {
    id?: number;
    company_Id?: number;
    documentType?: string | undefined;
    documentPath?: string | undefined;
    documentName?: string | undefined;
    isDeleted?: boolean;

    constructor(data?: ICompanyDocuments) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.documentType = _data["documentType"];
            this.documentPath = _data["documentPath"];
            this.documentName = _data["documentName"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): CompanyDocuments {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyDocuments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["documentType"] = this.documentType;
        data["documentPath"] = this.documentPath;
        data["documentName"] = this.documentName;
        data["isDeleted"] = this.isDeleted;
        super.toJSON(data);
        return data; 
    }
}

export interface ICompanyDocuments extends IAuditableEntity {
    id?: number;
    company_Id?: number;
    documentType?: string | undefined;
    documentPath?: string | undefined;
    documentName?: string | undefined;
    isDeleted?: boolean;
}

export class Route extends AuditableEntity implements IRoute {
    id?: number;
    driverName?: string | undefined;
    freightCompanyName?: string | undefined;
    truckNumber?: string | undefined;
    driverID?: string | undefined;
    pickUpDate?: Date | undefined;
    pickUpTime?: string | undefined;
    dockDate?: Date | undefined;
    dockTime?: string | undefined;
    dockID?: number;
    dock?: string | undefined;
    truckSize?: number;
    isDeleted?: boolean;
    quote?: number;
    newQuote?: number;
    trailerNumber?: string | undefined;
    sealNumber?: string | undefined;
    company_Id?: number;
    routeShipments?: RouteShipments[] | undefined;
    _Company?: FreightCompany | undefined;
    dockScheduled?: DockScheduled[] | undefined;
    freightInvoices?: FreightInvoices[] | undefined;

    constructor(data?: IRoute) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.driverName = _data["driverName"];
            this.freightCompanyName = _data["freightCompanyName"];
            this.truckNumber = _data["truckNumber"];
            this.driverID = _data["driverID"];
            this.pickUpDate = _data["pickUpDate"] ? new Date(_data["pickUpDate"].toString()) : <any>undefined;
            this.pickUpTime = _data["pickUpTime"];
            this.dockDate = _data["dockDate"] ? new Date(_data["dockDate"].toString()) : <any>undefined;
            this.dockTime = _data["dockTime"];
            this.dockID = _data["dockID"];
            this.dock = _data["dock"];
            this.truckSize = _data["truckSize"];
            this.isDeleted = _data["isDeleted"];
            this.quote = _data["quote"];
            this.newQuote = _data["newQuote"];
            this.trailerNumber = _data["trailerNumber"];
            this.sealNumber = _data["sealNumber"];
            this.company_Id = _data["company_Id"];
            if (Array.isArray(_data["routeShipments"])) {
                this.routeShipments = [] as any;
                for (let item of _data["routeShipments"])
                    this.routeShipments!.push(RouteShipments.fromJS(item));
            }
            this._Company = _data["_Company"] ? FreightCompany.fromJS(_data["_Company"]) : <any>undefined;
            if (Array.isArray(_data["dockScheduled"])) {
                this.dockScheduled = [] as any;
                for (let item of _data["dockScheduled"])
                    this.dockScheduled!.push(DockScheduled.fromJS(item));
            }
            if (Array.isArray(_data["freightInvoices"])) {
                this.freightInvoices = [] as any;
                for (let item of _data["freightInvoices"])
                    this.freightInvoices!.push(FreightInvoices.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Route {
        data = typeof data === 'object' ? data : {};
        let result = new Route();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["driverName"] = this.driverName;
        data["freightCompanyName"] = this.freightCompanyName;
        data["truckNumber"] = this.truckNumber;
        data["driverID"] = this.driverID;
        data["pickUpDate"] = this.pickUpDate ? this.pickUpDate.toISOString() : <any>undefined;
        data["pickUpTime"] = this.pickUpTime;
        data["dockDate"] = this.dockDate ? this.dockDate.toISOString() : <any>undefined;
        data["dockTime"] = this.dockTime;
        data["dockID"] = this.dockID;
        data["dock"] = this.dock;
        data["truckSize"] = this.truckSize;
        data["isDeleted"] = this.isDeleted;
        data["quote"] = this.quote;
        data["newQuote"] = this.newQuote;
        data["trailerNumber"] = this.trailerNumber;
        data["sealNumber"] = this.sealNumber;
        data["company_Id"] = this.company_Id;
        if (Array.isArray(this.routeShipments)) {
            data["routeShipments"] = [];
            for (let item of this.routeShipments)
                data["routeShipments"].push(item.toJSON());
        }
        data["_Company"] = this._Company ? this._Company.toJSON() : <any>undefined;
        if (Array.isArray(this.dockScheduled)) {
            data["dockScheduled"] = [];
            for (let item of this.dockScheduled)
                data["dockScheduled"].push(item.toJSON());
        }
        if (Array.isArray(this.freightInvoices)) {
            data["freightInvoices"] = [];
            for (let item of this.freightInvoices)
                data["freightInvoices"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IRoute extends IAuditableEntity {
    id?: number;
    driverName?: string | undefined;
    freightCompanyName?: string | undefined;
    truckNumber?: string | undefined;
    driverID?: string | undefined;
    pickUpDate?: Date | undefined;
    pickUpTime?: string | undefined;
    dockDate?: Date | undefined;
    dockTime?: string | undefined;
    dockID?: number;
    dock?: string | undefined;
    truckSize?: number;
    isDeleted?: boolean;
    quote?: number;
    newQuote?: number;
    trailerNumber?: string | undefined;
    sealNumber?: string | undefined;
    company_Id?: number;
    routeShipments?: RouteShipments[] | undefined;
    _Company?: FreightCompany | undefined;
    dockScheduled?: DockScheduled[] | undefined;
    freightInvoices?: FreightInvoices[] | undefined;
}

export class RouteShipments extends AuditableEntity implements IRouteShipments {
    id?: number;
    route_Id?: number | undefined;
    shipmentId?: number;
    orderId?: number | undefined;
    clientReferenceNumber?: string | undefined;
    tendered?: number;
    shipmentStatus?: string | undefined;
    freightType?: string | undefined;
    plannedQty?: number;
    weight?: number | undefined;
    statusId?: number;
    clientId?: number;
    client?: string | undefined;
    collectionPointId?: number;
    collectionPoint?: string | undefined;
    collectionPointAddress?: string | undefined;
    collectionPointAddress2?: string | undefined;
    collectionPointCity?: string | undefined;
    collectionPointState?: string | undefined;
    collectionPointZip?: string | undefined;
    siteId?: number;
    site?: string | undefined;
    siteName?: string | undefined;
    shipmentProductId?: number;
    shipmentProduct?: string | undefined;
    quote?: string | undefined;
    internalReferenceID?: number;
    internalNotes?: string | undefined;
    transportDays?: number | undefined;
    isAuto?: boolean;
    isInbound?: boolean;
    isArrangedByCustomer?: boolean;
    tenderPendingDate?: Date | undefined;
    tenderPendingApprovalDate?: Date | undefined;
    rejectShipmentDate?: Date | undefined;
    quoteApprovalDate?: Date | undefined;
    approvalDate?: Date | undefined;
    accountType?: string | undefined;
    isTransfer?: boolean;
    canTransfer?: boolean;
    dockID?: number;
    dockName?: string | undefined;
    recevingTypeId?: number | undefined;
    receivingTypeName?: string | undefined;
    contactName?: string | undefined;
    contactEmail?: string | undefined;
    contactPhone?: string | undefined;
    crmName?: string | undefined;
    crmEmail?: string | undefined;
    crmPhone?: string | undefined;
    pickUpDate?: Date | undefined;
    dockDate?: Date | undefined;
    dockTime?: string | undefined;
    orderDate?: Date | undefined;
    pickUpTime?: string | undefined;
    isInterCompany?: boolean;
    interCompanyShipmentId?: string | undefined;
    isVerifyDelivery?: boolean;
    rejectReason?: string | undefined;
    isNeedsHelp?: boolean;
    needsHelpNote?: string | undefined;
    notes?: string | undefined;
    transferredDate?: Date | undefined;
    routeDate?: Date | undefined;
    shipmentAknowledges?: ShipmentAknowledge[] | undefined;
    shipmentStatusList?: ShipmentStatus[] | undefined;
    avgShipWeight?: number;
    freightCostResponsibilityPercentage?: number;

    constructor(data?: IRouteShipments) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.route_Id = _data["route_Id"];
            this.shipmentId = _data["shipmentId"];
            this.orderId = _data["orderId"];
            this.clientReferenceNumber = _data["clientReferenceNumber"];
            this.tendered = _data["tendered"];
            this.shipmentStatus = _data["shipmentStatus"];
            this.freightType = _data["freightType"];
            this.plannedQty = _data["plannedQty"];
            this.weight = _data["weight"];
            this.statusId = _data["statusId"];
            this.clientId = _data["clientId"];
            this.client = _data["client"];
            this.collectionPointId = _data["collectionPointId"];
            this.collectionPoint = _data["collectionPoint"];
            this.collectionPointAddress = _data["collectionPointAddress"];
            this.collectionPointAddress2 = _data["collectionPointAddress2"];
            this.collectionPointCity = _data["collectionPointCity"];
            this.collectionPointState = _data["collectionPointState"];
            this.collectionPointZip = _data["collectionPointZip"];
            this.siteId = _data["siteId"];
            this.site = _data["site"];
            this.siteName = _data["siteName"];
            this.shipmentProductId = _data["shipmentProductId"];
            this.shipmentProduct = _data["shipmentProduct"];
            this.quote = _data["quote"];
            this.internalReferenceID = _data["internalReferenceID"];
            this.internalNotes = _data["internalNotes"];
            this.transportDays = _data["transportDays"];
            this.isAuto = _data["isAuto"];
            this.isInbound = _data["isInbound"];
            this.isArrangedByCustomer = _data["isArrangedByCustomer"];
            this.tenderPendingDate = _data["tenderPendingDate"] ? new Date(_data["tenderPendingDate"].toString()) : <any>undefined;
            this.tenderPendingApprovalDate = _data["tenderPendingApprovalDate"] ? new Date(_data["tenderPendingApprovalDate"].toString()) : <any>undefined;
            this.rejectShipmentDate = _data["rejectShipmentDate"] ? new Date(_data["rejectShipmentDate"].toString()) : <any>undefined;
            this.quoteApprovalDate = _data["quoteApprovalDate"] ? new Date(_data["quoteApprovalDate"].toString()) : <any>undefined;
            this.approvalDate = _data["approvalDate"] ? new Date(_data["approvalDate"].toString()) : <any>undefined;
            this.accountType = _data["accountType"];
            this.isTransfer = _data["isTransfer"];
            this.canTransfer = _data["canTransfer"];
            this.dockID = _data["dockID"];
            this.dockName = _data["dockName"];
            this.recevingTypeId = _data["recevingTypeId"];
            this.receivingTypeName = _data["receivingTypeName"];
            this.contactName = _data["contactName"];
            this.contactEmail = _data["contactEmail"];
            this.contactPhone = _data["contactPhone"];
            this.crmName = _data["crmName"];
            this.crmEmail = _data["crmEmail"];
            this.crmPhone = _data["crmPhone"];
            this.pickUpDate = _data["pickUpDate"] ? new Date(_data["pickUpDate"].toString()) : <any>undefined;
            this.dockDate = _data["dockDate"] ? new Date(_data["dockDate"].toString()) : <any>undefined;
            this.dockTime = _data["dockTime"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.pickUpTime = _data["pickUpTime"];
            this.isInterCompany = _data["isInterCompany"];
            this.interCompanyShipmentId = _data["interCompanyShipmentId"];
            this.isVerifyDelivery = _data["isVerifyDelivery"];
            this.rejectReason = _data["rejectReason"];
            this.isNeedsHelp = _data["isNeedsHelp"];
            this.needsHelpNote = _data["needsHelpNote"];
            this.notes = _data["notes"];
            this.transferredDate = _data["transferredDate"] ? new Date(_data["transferredDate"].toString()) : <any>undefined;
            this.routeDate = _data["routeDate"] ? new Date(_data["routeDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["shipmentAknowledges"])) {
                this.shipmentAknowledges = [] as any;
                for (let item of _data["shipmentAknowledges"])
                    this.shipmentAknowledges!.push(ShipmentAknowledge.fromJS(item));
            }
            if (Array.isArray(_data["shipmentStatusList"])) {
                this.shipmentStatusList = [] as any;
                for (let item of _data["shipmentStatusList"])
                    this.shipmentStatusList!.push(ShipmentStatus.fromJS(item));
            }
            this.avgShipWeight = _data["avgShipWeight"];
            this.freightCostResponsibilityPercentage = _data["freightCostResponsibilityPercentage"];
        }
    }

    static fromJS(data: any): RouteShipments {
        data = typeof data === 'object' ? data : {};
        let result = new RouteShipments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["route_Id"] = this.route_Id;
        data["shipmentId"] = this.shipmentId;
        data["orderId"] = this.orderId;
        data["clientReferenceNumber"] = this.clientReferenceNumber;
        data["tendered"] = this.tendered;
        data["shipmentStatus"] = this.shipmentStatus;
        data["freightType"] = this.freightType;
        data["plannedQty"] = this.plannedQty;
        data["weight"] = this.weight;
        data["statusId"] = this.statusId;
        data["clientId"] = this.clientId;
        data["client"] = this.client;
        data["collectionPointId"] = this.collectionPointId;
        data["collectionPoint"] = this.collectionPoint;
        data["collectionPointAddress"] = this.collectionPointAddress;
        data["collectionPointAddress2"] = this.collectionPointAddress2;
        data["collectionPointCity"] = this.collectionPointCity;
        data["collectionPointState"] = this.collectionPointState;
        data["collectionPointZip"] = this.collectionPointZip;
        data["siteId"] = this.siteId;
        data["site"] = this.site;
        data["siteName"] = this.siteName;
        data["shipmentProductId"] = this.shipmentProductId;
        data["shipmentProduct"] = this.shipmentProduct;
        data["quote"] = this.quote;
        data["internalReferenceID"] = this.internalReferenceID;
        data["internalNotes"] = this.internalNotes;
        data["transportDays"] = this.transportDays;
        data["isAuto"] = this.isAuto;
        data["isInbound"] = this.isInbound;
        data["isArrangedByCustomer"] = this.isArrangedByCustomer;
        data["tenderPendingDate"] = this.tenderPendingDate ? this.tenderPendingDate.toISOString() : <any>undefined;
        data["tenderPendingApprovalDate"] = this.tenderPendingApprovalDate ? this.tenderPendingApprovalDate.toISOString() : <any>undefined;
        data["rejectShipmentDate"] = this.rejectShipmentDate ? this.rejectShipmentDate.toISOString() : <any>undefined;
        data["quoteApprovalDate"] = this.quoteApprovalDate ? this.quoteApprovalDate.toISOString() : <any>undefined;
        data["approvalDate"] = this.approvalDate ? this.approvalDate.toISOString() : <any>undefined;
        data["accountType"] = this.accountType;
        data["isTransfer"] = this.isTransfer;
        data["canTransfer"] = this.canTransfer;
        data["dockID"] = this.dockID;
        data["dockName"] = this.dockName;
        data["recevingTypeId"] = this.recevingTypeId;
        data["receivingTypeName"] = this.receivingTypeName;
        data["contactName"] = this.contactName;
        data["contactEmail"] = this.contactEmail;
        data["contactPhone"] = this.contactPhone;
        data["crmName"] = this.crmName;
        data["crmEmail"] = this.crmEmail;
        data["crmPhone"] = this.crmPhone;
        data["pickUpDate"] = this.pickUpDate ? this.pickUpDate.toISOString() : <any>undefined;
        data["dockDate"] = this.dockDate ? this.dockDate.toISOString() : <any>undefined;
        data["dockTime"] = this.dockTime;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["pickUpTime"] = this.pickUpTime;
        data["isInterCompany"] = this.isInterCompany;
        data["interCompanyShipmentId"] = this.interCompanyShipmentId;
        data["isVerifyDelivery"] = this.isVerifyDelivery;
        data["rejectReason"] = this.rejectReason;
        data["isNeedsHelp"] = this.isNeedsHelp;
        data["needsHelpNote"] = this.needsHelpNote;
        data["notes"] = this.notes;
        data["transferredDate"] = this.transferredDate ? this.transferredDate.toISOString() : <any>undefined;
        data["routeDate"] = this.routeDate ? this.routeDate.toISOString() : <any>undefined;
        if (Array.isArray(this.shipmentAknowledges)) {
            data["shipmentAknowledges"] = [];
            for (let item of this.shipmentAknowledges)
                data["shipmentAknowledges"].push(item.toJSON());
        }
        if (Array.isArray(this.shipmentStatusList)) {
            data["shipmentStatusList"] = [];
            for (let item of this.shipmentStatusList)
                data["shipmentStatusList"].push(item.toJSON());
        }
        data["avgShipWeight"] = this.avgShipWeight;
        data["freightCostResponsibilityPercentage"] = this.freightCostResponsibilityPercentage;
        super.toJSON(data);
        return data; 
    }
}

export interface IRouteShipments extends IAuditableEntity {
    id?: number;
    route_Id?: number | undefined;
    shipmentId?: number;
    orderId?: number | undefined;
    clientReferenceNumber?: string | undefined;
    tendered?: number;
    shipmentStatus?: string | undefined;
    freightType?: string | undefined;
    plannedQty?: number;
    weight?: number | undefined;
    statusId?: number;
    clientId?: number;
    client?: string | undefined;
    collectionPointId?: number;
    collectionPoint?: string | undefined;
    collectionPointAddress?: string | undefined;
    collectionPointAddress2?: string | undefined;
    collectionPointCity?: string | undefined;
    collectionPointState?: string | undefined;
    collectionPointZip?: string | undefined;
    siteId?: number;
    site?: string | undefined;
    siteName?: string | undefined;
    shipmentProductId?: number;
    shipmentProduct?: string | undefined;
    quote?: string | undefined;
    internalReferenceID?: number;
    internalNotes?: string | undefined;
    transportDays?: number | undefined;
    isAuto?: boolean;
    isInbound?: boolean;
    isArrangedByCustomer?: boolean;
    tenderPendingDate?: Date | undefined;
    tenderPendingApprovalDate?: Date | undefined;
    rejectShipmentDate?: Date | undefined;
    quoteApprovalDate?: Date | undefined;
    approvalDate?: Date | undefined;
    accountType?: string | undefined;
    isTransfer?: boolean;
    canTransfer?: boolean;
    dockID?: number;
    dockName?: string | undefined;
    recevingTypeId?: number | undefined;
    receivingTypeName?: string | undefined;
    contactName?: string | undefined;
    contactEmail?: string | undefined;
    contactPhone?: string | undefined;
    crmName?: string | undefined;
    crmEmail?: string | undefined;
    crmPhone?: string | undefined;
    pickUpDate?: Date | undefined;
    dockDate?: Date | undefined;
    dockTime?: string | undefined;
    orderDate?: Date | undefined;
    pickUpTime?: string | undefined;
    isInterCompany?: boolean;
    interCompanyShipmentId?: string | undefined;
    isVerifyDelivery?: boolean;
    rejectReason?: string | undefined;
    isNeedsHelp?: boolean;
    needsHelpNote?: string | undefined;
    notes?: string | undefined;
    transferredDate?: Date | undefined;
    routeDate?: Date | undefined;
    shipmentAknowledges?: ShipmentAknowledge[] | undefined;
    shipmentStatusList?: ShipmentStatus[] | undefined;
    avgShipWeight?: number;
    freightCostResponsibilityPercentage?: number;
}

export class ShipmentAknowledge extends AuditableEntity implements IShipmentAknowledge {
    id?: number;
    routeShipment_Id?: number;
    rejectionToken?: string | undefined;
    confirmToken?: string | undefined;
    isExpired?: boolean;
    sentEmail?: string | undefined;
    accountType?: string | undefined;
    _RouteShipments?: RouteShipments | undefined;

    constructor(data?: IShipmentAknowledge) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.routeShipment_Id = _data["routeShipment_Id"];
            this.rejectionToken = _data["rejectionToken"];
            this.confirmToken = _data["confirmToken"];
            this.isExpired = _data["isExpired"];
            this.sentEmail = _data["sentEmail"];
            this.accountType = _data["accountType"];
            this._RouteShipments = _data["_RouteShipments"] ? RouteShipments.fromJS(_data["_RouteShipments"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ShipmentAknowledge {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentAknowledge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["routeShipment_Id"] = this.routeShipment_Id;
        data["rejectionToken"] = this.rejectionToken;
        data["confirmToken"] = this.confirmToken;
        data["isExpired"] = this.isExpired;
        data["sentEmail"] = this.sentEmail;
        data["accountType"] = this.accountType;
        data["_RouteShipments"] = this._RouteShipments ? this._RouteShipments.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IShipmentAknowledge extends IAuditableEntity {
    id?: number;
    routeShipment_Id?: number;
    rejectionToken?: string | undefined;
    confirmToken?: string | undefined;
    isExpired?: boolean;
    sentEmail?: string | undefined;
    accountType?: string | undefined;
    _RouteShipments?: RouteShipments | undefined;
}

export class ShipmentStatus extends AuditableEntity implements IShipmentStatus {
    id?: number;
    routeShipment_Id?: number;
    oldStatus?: string | undefined;
    newStatus?: string | undefined;

    constructor(data?: IShipmentStatus) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.routeShipment_Id = _data["routeShipment_Id"];
            this.oldStatus = _data["oldStatus"];
            this.newStatus = _data["newStatus"];
        }
    }

    static fromJS(data: any): ShipmentStatus {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["routeShipment_Id"] = this.routeShipment_Id;
        data["oldStatus"] = this.oldStatus;
        data["newStatus"] = this.newStatus;
        super.toJSON(data);
        return data; 
    }
}

export interface IShipmentStatus extends IAuditableEntity {
    id?: number;
    routeShipment_Id?: number;
    oldStatus?: string | undefined;
    newStatus?: string | undefined;
}

export class DockScheduled extends AuditableEntity implements IDockScheduled {
    id?: number;
    route_Id?: number;
    dockId?: number;
    dock?: string | undefined;
    receivingTypeID?: number;
    siteId?: number;
    dockDate?: Date;
    dockTime?: string | undefined;
    capacity?: string | undefined;
    site?: string | undefined;
    receivingType?: string | undefined;
    _Route?: Route | undefined;

    constructor(data?: IDockScheduled) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.route_Id = _data["route_Id"];
            this.dockId = _data["dockId"];
            this.dock = _data["dock"];
            this.receivingTypeID = _data["receivingTypeID"];
            this.siteId = _data["siteId"];
            this.dockDate = _data["dockDate"] ? new Date(_data["dockDate"].toString()) : <any>undefined;
            this.dockTime = _data["dockTime"];
            this.capacity = _data["capacity"];
            this.site = _data["site"];
            this.receivingType = _data["receivingType"];
            this._Route = _data["_Route"] ? Route.fromJS(_data["_Route"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DockScheduled {
        data = typeof data === 'object' ? data : {};
        let result = new DockScheduled();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["route_Id"] = this.route_Id;
        data["dockId"] = this.dockId;
        data["dock"] = this.dock;
        data["receivingTypeID"] = this.receivingTypeID;
        data["siteId"] = this.siteId;
        data["dockDate"] = this.dockDate ? this.dockDate.toISOString() : <any>undefined;
        data["dockTime"] = this.dockTime;
        data["capacity"] = this.capacity;
        data["site"] = this.site;
        data["receivingType"] = this.receivingType;
        data["_Route"] = this._Route ? this._Route.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IDockScheduled extends IAuditableEntity {
    id?: number;
    route_Id?: number;
    dockId?: number;
    dock?: string | undefined;
    receivingTypeID?: number;
    siteId?: number;
    dockDate?: Date;
    dockTime?: string | undefined;
    capacity?: string | undefined;
    site?: string | undefined;
    receivingType?: string | undefined;
    _Route?: Route | undefined;
}

export class FreightInvoices extends AuditableEntity implements IFreightInvoices {
    id?: number;
    route_Id?: number;
    isApproved?: boolean;
    quote?: number;
    percentage?: number;
    grandTotal?: number;
    approvedDate?: Date;
    _Route?: Route | undefined;
    freightInvoiceHeaders?: FreightInvoiceHeaders[] | undefined;
    isDeleted?: boolean;

    constructor(data?: IFreightInvoices) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.route_Id = _data["route_Id"];
            this.isApproved = _data["isApproved"];
            this.quote = _data["quote"];
            this.percentage = _data["percentage"];
            this.grandTotal = _data["grandTotal"];
            this.approvedDate = _data["approvedDate"] ? new Date(_data["approvedDate"].toString()) : <any>undefined;
            this._Route = _data["_Route"] ? Route.fromJS(_data["_Route"]) : <any>undefined;
            if (Array.isArray(_data["freightInvoiceHeaders"])) {
                this.freightInvoiceHeaders = [] as any;
                for (let item of _data["freightInvoiceHeaders"])
                    this.freightInvoiceHeaders!.push(FreightInvoiceHeaders.fromJS(item));
            }
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): FreightInvoices {
        data = typeof data === 'object' ? data : {};
        let result = new FreightInvoices();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["route_Id"] = this.route_Id;
        data["isApproved"] = this.isApproved;
        data["quote"] = this.quote;
        data["percentage"] = this.percentage;
        data["grandTotal"] = this.grandTotal;
        data["approvedDate"] = this.approvedDate ? this.approvedDate.toISOString() : <any>undefined;
        data["_Route"] = this._Route ? this._Route.toJSON() : <any>undefined;
        if (Array.isArray(this.freightInvoiceHeaders)) {
            data["freightInvoiceHeaders"] = [];
            for (let item of this.freightInvoiceHeaders)
                data["freightInvoiceHeaders"].push(item.toJSON());
        }
        data["isDeleted"] = this.isDeleted;
        super.toJSON(data);
        return data; 
    }
}

export interface IFreightInvoices extends IAuditableEntity {
    id?: number;
    route_Id?: number;
    isApproved?: boolean;
    quote?: number;
    percentage?: number;
    grandTotal?: number;
    approvedDate?: Date;
    _Route?: Route | undefined;
    freightInvoiceHeaders?: FreightInvoiceHeaders[] | undefined;
    isDeleted?: boolean;
}

export class FreightInvoiceHeaders extends AuditableEntity implements IFreightInvoiceHeaders {
    id?: number;
    freightInvoice_Id?: number;
    freightCharges?: number;
    invoiceNumber?: string | undefined;
    invoiceName?: string | undefined;
    invoiceDate?: Date;
    notes?: string | undefined;
    transportingMiles?: number;
    boiNumber?: string | undefined;
    freightInvoiceItems?: FreightInvoiceItems[] | undefined;
    isDeleted?: boolean;

    constructor(data?: IFreightInvoiceHeaders) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.freightInvoice_Id = _data["freightInvoice_Id"];
            this.freightCharges = _data["freightCharges"];
            this.invoiceNumber = _data["invoiceNumber"];
            this.invoiceName = _data["invoiceName"];
            this.invoiceDate = _data["invoiceDate"] ? new Date(_data["invoiceDate"].toString()) : <any>undefined;
            this.notes = _data["notes"];
            this.transportingMiles = _data["transportingMiles"];
            this.boiNumber = _data["boiNumber"];
            if (Array.isArray(_data["freightInvoiceItems"])) {
                this.freightInvoiceItems = [] as any;
                for (let item of _data["freightInvoiceItems"])
                    this.freightInvoiceItems!.push(FreightInvoiceItems.fromJS(item));
            }
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): FreightInvoiceHeaders {
        data = typeof data === 'object' ? data : {};
        let result = new FreightInvoiceHeaders();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["freightInvoice_Id"] = this.freightInvoice_Id;
        data["freightCharges"] = this.freightCharges;
        data["invoiceNumber"] = this.invoiceNumber;
        data["invoiceName"] = this.invoiceName;
        data["invoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        data["transportingMiles"] = this.transportingMiles;
        data["boiNumber"] = this.boiNumber;
        if (Array.isArray(this.freightInvoiceItems)) {
            data["freightInvoiceItems"] = [];
            for (let item of this.freightInvoiceItems)
                data["freightInvoiceItems"].push(item.toJSON());
        }
        data["isDeleted"] = this.isDeleted;
        super.toJSON(data);
        return data; 
    }
}

export interface IFreightInvoiceHeaders extends IAuditableEntity {
    id?: number;
    freightInvoice_Id?: number;
    freightCharges?: number;
    invoiceNumber?: string | undefined;
    invoiceName?: string | undefined;
    invoiceDate?: Date;
    notes?: string | undefined;
    transportingMiles?: number;
    boiNumber?: string | undefined;
    freightInvoiceItems?: FreightInvoiceItems[] | undefined;
    isDeleted?: boolean;
}

export class FreightPermissions extends AuditableEntity implements IFreightPermissions {
    id?: number;
    company_Id?: number;
    permission_Id?: number;
    isActive?: boolean;

    constructor(data?: IFreightPermissions) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.permission_Id = _data["permission_Id"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): FreightPermissions {
        data = typeof data === 'object' ? data : {};
        let result = new FreightPermissions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["permission_Id"] = this.permission_Id;
        data["isActive"] = this.isActive;
        super.toJSON(data);
        return data; 
    }
}

export interface IFreightPermissions extends IAuditableEntity {
    id?: number;
    company_Id?: number;
    permission_Id?: number;
    isActive?: boolean;
}

export class GridCompanyQuery extends GridQuery implements IGridCompanyQuery {
    isActive?: boolean;

    constructor(data?: IGridCompanyQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GridCompanyQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridCompanyQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isActive"] = this.isActive;
        super.toJSON(data);
        return data; 
    }
}

export interface IGridCompanyQuery extends IGridQuery {
    isActive?: boolean;
}

export class UpdateCompanyCommand implements IUpdateCompanyCommand {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    isActive?: boolean;
    address?: string | undefined;
    address1?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    region?: string | undefined;
    country?: string | undefined;
    paymentMethod?: string | undefined;
    paymentTerm?: string | undefined;
    ftl?: boolean;
    ltl?: boolean;
    wgs?: boolean;
    tenderEmail?: string | undefined;

    constructor(data?: IUpdateCompanyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.phone = _data["phone"];
            this.fax = _data["fax"];
            this.isActive = _data["isActive"];
            this.address = _data["address"];
            this.address1 = _data["address1"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.region = _data["region"];
            this.country = _data["country"];
            this.paymentMethod = _data["paymentMethod"];
            this.paymentTerm = _data["paymentTerm"];
            this.ftl = _data["ftl"];
            this.ltl = _data["ltl"];
            this.wgs = _data["wgs"];
            this.tenderEmail = _data["tenderEmail"];
        }
    }

    static fromJS(data: any): UpdateCompanyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCompanyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        data["isActive"] = this.isActive;
        data["address"] = this.address;
        data["address1"] = this.address1;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["region"] = this.region;
        data["country"] = this.country;
        data["paymentMethod"] = this.paymentMethod;
        data["paymentTerm"] = this.paymentTerm;
        data["ftl"] = this.ftl;
        data["ltl"] = this.ltl;
        data["wgs"] = this.wgs;
        data["tenderEmail"] = this.tenderEmail;
        return data; 
    }
}

export interface IUpdateCompanyCommand {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    isActive?: boolean;
    address?: string | undefined;
    address1?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    region?: string | undefined;
    country?: string | undefined;
    paymentMethod?: string | undefined;
    paymentTerm?: string | undefined;
    ftl?: boolean;
    ltl?: boolean;
    wgs?: boolean;
    tenderEmail?: string | undefined;
}

export class CreateCompanyCommand implements ICreateCompanyCommand {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    isActive?: boolean;
    address?: string | undefined;
    address1?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    region?: string | undefined;
    country?: string | undefined;
    paymentMethod?: string | undefined;
    paymentTerm?: string | undefined;
    ftl?: boolean;
    ltl?: boolean;
    wgs?: boolean;
    tenderEmail?: string | undefined;

    constructor(data?: ICreateCompanyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.phone = _data["phone"];
            this.fax = _data["fax"];
            this.isActive = _data["isActive"];
            this.address = _data["address"];
            this.address1 = _data["address1"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.region = _data["region"];
            this.country = _data["country"];
            this.paymentMethod = _data["paymentMethod"];
            this.paymentTerm = _data["paymentTerm"];
            this.ftl = _data["ftl"];
            this.ltl = _data["ltl"];
            this.wgs = _data["wgs"];
            this.tenderEmail = _data["tenderEmail"];
        }
    }

    static fromJS(data: any): CreateCompanyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCompanyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        data["isActive"] = this.isActive;
        data["address"] = this.address;
        data["address1"] = this.address1;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["region"] = this.region;
        data["country"] = this.country;
        data["paymentMethod"] = this.paymentMethod;
        data["paymentTerm"] = this.paymentTerm;
        data["ftl"] = this.ftl;
        data["ltl"] = this.ltl;
        data["wgs"] = this.wgs;
        data["tenderEmail"] = this.tenderEmail;
        return data; 
    }
}

export interface ICreateCompanyCommand {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    isActive?: boolean;
    address?: string | undefined;
    address1?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    region?: string | undefined;
    country?: string | undefined;
    paymentMethod?: string | undefined;
    paymentTerm?: string | undefined;
    ftl?: boolean;
    ltl?: boolean;
    wgs?: boolean;
    tenderEmail?: string | undefined;
}

export class FreightCompanyEditDto implements IFreightCompanyEditDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    address?: string | undefined;
    address1?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    region?: string | undefined;
    country?: string | undefined;
    paymentMethod?: string | undefined;
    paymentTerm?: string | undefined;
    ftl?: boolean;
    ltl?: boolean;
    wgs?: boolean;
    isActive?: boolean;
    tenderEmail?: string | undefined;

    constructor(data?: IFreightCompanyEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.phone = _data["phone"];
            this.fax = _data["fax"];
            this.address = _data["address"];
            this.address1 = _data["address1"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.region = _data["region"];
            this.country = _data["country"];
            this.paymentMethod = _data["paymentMethod"];
            this.paymentTerm = _data["paymentTerm"];
            this.ftl = _data["ftl"];
            this.ltl = _data["ltl"];
            this.wgs = _data["wgs"];
            this.isActive = _data["isActive"];
            this.tenderEmail = _data["tenderEmail"];
        }
    }

    static fromJS(data: any): FreightCompanyEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new FreightCompanyEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        data["address"] = this.address;
        data["address1"] = this.address1;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["region"] = this.region;
        data["country"] = this.country;
        data["paymentMethod"] = this.paymentMethod;
        data["paymentTerm"] = this.paymentTerm;
        data["ftl"] = this.ftl;
        data["ltl"] = this.ltl;
        data["wgs"] = this.wgs;
        data["isActive"] = this.isActive;
        data["tenderEmail"] = this.tenderEmail;
        return data; 
    }
}

export interface IFreightCompanyEditDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    address?: string | undefined;
    address1?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    region?: string | undefined;
    country?: string | undefined;
    paymentMethod?: string | undefined;
    paymentTerm?: string | undefined;
    ftl?: boolean;
    ltl?: boolean;
    wgs?: boolean;
    isActive?: boolean;
    tenderEmail?: string | undefined;
}

export class GridResultOfCompanyContactDto implements IGridResultOfCompanyContactDto {
    data?: CompanyContactDto[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfCompanyContactDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CompanyContactDto.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfCompanyContactDto {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfCompanyContactDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfCompanyContactDto {
    data?: CompanyContactDto[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class CompanyContactDto implements ICompanyContactDto {
    id?: number;
    company_Id?: number;
    contactType_Id?: number;
    fName?: string | undefined;
    lName?: string | undefined;
    title?: string | undefined;
    mobile?: string | undefined;
    fax?: string | undefined;
    ext?: string | undefined;
    email?: string | undefined;
    notes?: string | undefined;

    constructor(data?: ICompanyContactDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.contactType_Id = _data["contactType_Id"];
            this.fName = _data["fName"];
            this.lName = _data["lName"];
            this.title = _data["title"];
            this.mobile = _data["mobile"];
            this.fax = _data["fax"];
            this.ext = _data["ext"];
            this.email = _data["email"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): CompanyContactDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyContactDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["contactType_Id"] = this.contactType_Id;
        data["fName"] = this.fName;
        data["lName"] = this.lName;
        data["title"] = this.title;
        data["mobile"] = this.mobile;
        data["fax"] = this.fax;
        data["ext"] = this.ext;
        data["email"] = this.email;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface ICompanyContactDto {
    id?: number;
    company_Id?: number;
    contactType_Id?: number;
    fName?: string | undefined;
    lName?: string | undefined;
    title?: string | undefined;
    mobile?: string | undefined;
    fax?: string | undefined;
    ext?: string | undefined;
    email?: string | undefined;
    notes?: string | undefined;
}

export class GridCompanyContactQuery extends GridQuery implements IGridCompanyContactQuery {

    constructor(data?: IGridCompanyContactQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GridCompanyContactQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridCompanyContactQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGridCompanyContactQuery extends IGridQuery {
}

export class CreateCompanyContactCommand implements ICreateCompanyContactCommand {
    id?: number;
    company_Id?: number;
    contactType_Id?: number;
    fName?: string | undefined;
    lName?: string | undefined;
    title?: string | undefined;
    mobile?: string | undefined;
    fax?: string | undefined;
    ext?: string | undefined;
    email?: string | undefined;
    notes?: string | undefined;
    isDeleted?: boolean | undefined;

    constructor(data?: ICreateCompanyContactCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.contactType_Id = _data["contactType_Id"];
            this.fName = _data["fName"];
            this.lName = _data["lName"];
            this.title = _data["title"];
            this.mobile = _data["mobile"];
            this.fax = _data["fax"];
            this.ext = _data["ext"];
            this.email = _data["email"];
            this.notes = _data["notes"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): CreateCompanyContactCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCompanyContactCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["contactType_Id"] = this.contactType_Id;
        data["fName"] = this.fName;
        data["lName"] = this.lName;
        data["title"] = this.title;
        data["mobile"] = this.mobile;
        data["fax"] = this.fax;
        data["ext"] = this.ext;
        data["email"] = this.email;
        data["notes"] = this.notes;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }
}

export interface ICreateCompanyContactCommand {
    id?: number;
    company_Id?: number;
    contactType_Id?: number;
    fName?: string | undefined;
    lName?: string | undefined;
    title?: string | undefined;
    mobile?: string | undefined;
    fax?: string | undefined;
    ext?: string | undefined;
    email?: string | undefined;
    notes?: string | undefined;
    isDeleted?: boolean | undefined;
}

export class RemoveContactCommand implements IRemoveContactCommand {
    contactId?: number;

    constructor(data?: IRemoveContactCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.contactId = _data["contactId"];
        }
    }

    static fromJS(data: any): RemoveContactCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveContactCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contactId"] = this.contactId;
        return data; 
    }
}

export interface IRemoveContactCommand {
    contactId?: number;
}

export class BasicInformationCompanyDto implements IBasicInformationCompanyDto {
    countries?: LU_Country[] | undefined;
    states?: LU_State[] | undefined;
    clientContactTypes?: LU_ClientContactTypes[] | undefined;
    paymentMethods?: Payment[] | undefined;
    paymentTerms?: Payment[] | undefined;
    freightCategories?: FreightCategory[] | undefined;
    freightCompanyCodes?: FreightCompanyCodes[] | undefined;

    constructor(data?: IBasicInformationCompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["countries"])) {
                this.countries = [] as any;
                for (let item of _data["countries"])
                    this.countries!.push(LU_Country.fromJS(item));
            }
            if (Array.isArray(_data["states"])) {
                this.states = [] as any;
                for (let item of _data["states"])
                    this.states!.push(LU_State.fromJS(item));
            }
            if (Array.isArray(_data["clientContactTypes"])) {
                this.clientContactTypes = [] as any;
                for (let item of _data["clientContactTypes"])
                    this.clientContactTypes!.push(LU_ClientContactTypes.fromJS(item));
            }
            if (Array.isArray(_data["paymentMethods"])) {
                this.paymentMethods = [] as any;
                for (let item of _data["paymentMethods"])
                    this.paymentMethods!.push(Payment.fromJS(item));
            }
            if (Array.isArray(_data["paymentTerms"])) {
                this.paymentTerms = [] as any;
                for (let item of _data["paymentTerms"])
                    this.paymentTerms!.push(Payment.fromJS(item));
            }
            if (Array.isArray(_data["freightCategories"])) {
                this.freightCategories = [] as any;
                for (let item of _data["freightCategories"])
                    this.freightCategories!.push(FreightCategory.fromJS(item));
            }
            if (Array.isArray(_data["freightCompanyCodes"])) {
                this.freightCompanyCodes = [] as any;
                for (let item of _data["freightCompanyCodes"])
                    this.freightCompanyCodes!.push(FreightCompanyCodes.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BasicInformationCompanyDto {
        data = typeof data === 'object' ? data : {};
        let result = new BasicInformationCompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.countries)) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        if (Array.isArray(this.states)) {
            data["states"] = [];
            for (let item of this.states)
                data["states"].push(item.toJSON());
        }
        if (Array.isArray(this.clientContactTypes)) {
            data["clientContactTypes"] = [];
            for (let item of this.clientContactTypes)
                data["clientContactTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentMethods)) {
            data["paymentMethods"] = [];
            for (let item of this.paymentMethods)
                data["paymentMethods"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentTerms)) {
            data["paymentTerms"] = [];
            for (let item of this.paymentTerms)
                data["paymentTerms"].push(item.toJSON());
        }
        if (Array.isArray(this.freightCategories)) {
            data["freightCategories"] = [];
            for (let item of this.freightCategories)
                data["freightCategories"].push(item.toJSON());
        }
        if (Array.isArray(this.freightCompanyCodes)) {
            data["freightCompanyCodes"] = [];
            for (let item of this.freightCompanyCodes)
                data["freightCompanyCodes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBasicInformationCompanyDto {
    countries?: LU_Country[] | undefined;
    states?: LU_State[] | undefined;
    clientContactTypes?: LU_ClientContactTypes[] | undefined;
    paymentMethods?: Payment[] | undefined;
    paymentTerms?: Payment[] | undefined;
    freightCategories?: FreightCategory[] | undefined;
    freightCompanyCodes?: FreightCompanyCodes[] | undefined;
}

export class LU_Country extends AuditableEntity implements ILU_Country {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
    description?: string | undefined;

    constructor(data?: ILU_Country) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): LU_Country {
        data = typeof data === 'object' ? data : {};
        let result = new LU_Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        super.toJSON(data);
        return data; 
    }
}

export interface ILU_Country extends IAuditableEntity {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
    description?: string | undefined;
}

export class LU_State extends AuditableEntity implements ILU_State {
    id?: number;
    name?: string | undefined;
    abbr?: string | undefined;
    description?: string | undefined;

    constructor(data?: ILU_State) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.abbr = _data["abbr"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): LU_State {
        data = typeof data === 'object' ? data : {};
        let result = new LU_State();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["abbr"] = this.abbr;
        data["description"] = this.description;
        super.toJSON(data);
        return data; 
    }
}

export interface ILU_State extends IAuditableEntity {
    id?: number;
    name?: string | undefined;
    abbr?: string | undefined;
    description?: string | undefined;
}

export class LU_ClientContactTypes extends AuditableEntity implements ILU_ClientContactTypes {
    id?: number;
    name?: string | undefined;
    companyContacts?: CompanyContact[] | undefined;

    constructor(data?: ILU_ClientContactTypes) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["companyContacts"])) {
                this.companyContacts = [] as any;
                for (let item of _data["companyContacts"])
                    this.companyContacts!.push(CompanyContact.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LU_ClientContactTypes {
        data = typeof data === 'object' ? data : {};
        let result = new LU_ClientContactTypes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.companyContacts)) {
            data["companyContacts"] = [];
            for (let item of this.companyContacts)
                data["companyContacts"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ILU_ClientContactTypes extends IAuditableEntity {
    id?: number;
    name?: string | undefined;
    companyContacts?: CompanyContact[] | undefined;
}

export class Payment implements IPayment {
    id?: number;
    name?: string | undefined;

    constructor(data?: IPayment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Payment {
        data = typeof data === 'object' ? data : {};
        let result = new Payment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IPayment {
    id?: number;
    name?: string | undefined;
}

export class GridResultOfFtlDTO implements IGridResultOfFtlDTO {
    data?: FtlDTO[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfFtlDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(FtlDTO.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfFtlDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfFtlDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfFtlDTO {
    data?: FtlDTO[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class FtlDTO implements IFtlDTO {
    id?: number;
    originCity?: string | undefined;
    destinationCity?: string | undefined;
    originState?: string | undefined;
    destinationState?: string | undefined;
    price?: number;
    truckSize?: string | undefined;

    constructor(data?: IFtlDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.originCity = _data["originCity"];
            this.destinationCity = _data["destinationCity"];
            this.originState = _data["originState"];
            this.destinationState = _data["destinationState"];
            this.price = _data["price"];
            this.truckSize = _data["truckSize"];
        }
    }

    static fromJS(data: any): FtlDTO {
        data = typeof data === 'object' ? data : {};
        let result = new FtlDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["originCity"] = this.originCity;
        data["destinationCity"] = this.destinationCity;
        data["originState"] = this.originState;
        data["destinationState"] = this.destinationState;
        data["price"] = this.price;
        data["truckSize"] = this.truckSize;
        return data; 
    }
}

export interface IFtlDTO {
    id?: number;
    originCity?: string | undefined;
    destinationCity?: string | undefined;
    originState?: string | undefined;
    destinationState?: string | undefined;
    price?: number;
    truckSize?: string | undefined;
}

export class GridFTLQuery extends GridQuery implements IGridFTLQuery {

    constructor(data?: IGridFTLQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GridFTLQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridFTLQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGridFTLQuery extends IGridQuery {
}

export class CreateFTLCommand implements ICreateFTLCommand {
    id?: number;
    company_Id?: number;
    originCity?: string | undefined;
    originState?: string | undefined;
    destinationCity?: string | undefined;
    destinationState?: string | undefined;
    isActive?: boolean;
    isDeleted?: boolean;
    price?: number;
    truck_Id?: number;

    constructor(data?: ICreateFTLCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.originCity = _data["originCity"];
            this.originState = _data["originState"];
            this.destinationCity = _data["destinationCity"];
            this.destinationState = _data["destinationState"];
            this.isActive = _data["isActive"];
            this.isDeleted = _data["isDeleted"];
            this.price = _data["price"];
            this.truck_Id = _data["truck_Id"];
        }
    }

    static fromJS(data: any): CreateFTLCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFTLCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["originCity"] = this.originCity;
        data["originState"] = this.originState;
        data["destinationCity"] = this.destinationCity;
        data["destinationState"] = this.destinationState;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        data["price"] = this.price;
        data["truck_Id"] = this.truck_Id;
        return data; 
    }
}

export interface ICreateFTLCommand {
    id?: number;
    company_Id?: number;
    originCity?: string | undefined;
    originState?: string | undefined;
    destinationCity?: string | undefined;
    destinationState?: string | undefined;
    isActive?: boolean;
    isDeleted?: boolean;
    price?: number;
    truck_Id?: number;
}

export class RemoveAndDeactiveFTLCommand implements IRemoveAndDeactiveFTLCommand {
    id?: number;
    action?: string | undefined;
    isDeactive?: boolean;
    isDeleted?: string | undefined;

    constructor(data?: IRemoveAndDeactiveFTLCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.action = _data["action"];
            this.isDeactive = _data["isDeactive"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): RemoveAndDeactiveFTLCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveAndDeactiveFTLCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["action"] = this.action;
        data["isDeactive"] = this.isDeactive;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }
}

export interface IRemoveAndDeactiveFTLCommand {
    id?: number;
    action?: string | undefined;
    isDeactive?: boolean;
    isDeleted?: string | undefined;
}

export class GridResultOfLtlDto implements IGridResultOfLtlDto {
    data?: LtlDto[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfLtlDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(LtlDto.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfLtlDto {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfLtlDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfLtlDto {
    data?: LtlDto[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class LtlDto implements ILtlDto {
    id?: number;
    company_Id?: number;
    originCity?: string | undefined;
    destinationCity?: string | undefined;
    originState?: string | undefined;
    destinationState?: string | undefined;
    pPrice1?: number;
    pPrice2?: number;
    pPrice3?: number;
    pPrice4?: number;
    pPrice5?: number;
    pPrice6?: number;
    pPrice7?: number;
    pPrice8?: number;
    pPrice9?: number;
    pPrice10?: number;
    truckSize?: string | undefined;

    constructor(data?: ILtlDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.originCity = _data["originCity"];
            this.destinationCity = _data["destinationCity"];
            this.originState = _data["originState"];
            this.destinationState = _data["destinationState"];
            this.pPrice1 = _data["pPrice1"];
            this.pPrice2 = _data["pPrice2"];
            this.pPrice3 = _data["pPrice3"];
            this.pPrice4 = _data["pPrice4"];
            this.pPrice5 = _data["pPrice5"];
            this.pPrice6 = _data["pPrice6"];
            this.pPrice7 = _data["pPrice7"];
            this.pPrice8 = _data["pPrice8"];
            this.pPrice9 = _data["pPrice9"];
            this.pPrice10 = _data["pPrice10"];
            this.truckSize = _data["truckSize"];
        }
    }

    static fromJS(data: any): LtlDto {
        data = typeof data === 'object' ? data : {};
        let result = new LtlDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["originCity"] = this.originCity;
        data["destinationCity"] = this.destinationCity;
        data["originState"] = this.originState;
        data["destinationState"] = this.destinationState;
        data["pPrice1"] = this.pPrice1;
        data["pPrice2"] = this.pPrice2;
        data["pPrice3"] = this.pPrice3;
        data["pPrice4"] = this.pPrice4;
        data["pPrice5"] = this.pPrice5;
        data["pPrice6"] = this.pPrice6;
        data["pPrice7"] = this.pPrice7;
        data["pPrice8"] = this.pPrice8;
        data["pPrice9"] = this.pPrice9;
        data["pPrice10"] = this.pPrice10;
        data["truckSize"] = this.truckSize;
        return data; 
    }
}

export interface ILtlDto {
    id?: number;
    company_Id?: number;
    originCity?: string | undefined;
    destinationCity?: string | undefined;
    originState?: string | undefined;
    destinationState?: string | undefined;
    pPrice1?: number;
    pPrice2?: number;
    pPrice3?: number;
    pPrice4?: number;
    pPrice5?: number;
    pPrice6?: number;
    pPrice7?: number;
    pPrice8?: number;
    pPrice9?: number;
    pPrice10?: number;
    truckSize?: string | undefined;
}

export class GridLTLQuery extends GridQuery implements IGridLTLQuery {

    constructor(data?: IGridLTLQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GridLTLQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridLTLQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGridLTLQuery extends IGridQuery {
}

export class CreateLTLCommand implements ICreateLTLCommand {
    id?: number;
    company_Id?: number;
    originCity?: string | undefined;
    originState?: string | undefined;
    destinationCity?: string | undefined;
    destinationState?: string | undefined;
    isActive?: boolean;
    isDeleted?: boolean;
    pPrice1?: number;
    pPrice2?: number;
    pPrice3?: number;
    pPrice4?: number;
    pPrice5?: number;
    pPrice6?: number;
    pPrice7?: number;
    pPrice8?: number;
    pPrice9?: number;
    pPrice10?: number;
    truck_Id?: number;

    constructor(data?: ICreateLTLCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.originCity = _data["originCity"];
            this.originState = _data["originState"];
            this.destinationCity = _data["destinationCity"];
            this.destinationState = _data["destinationState"];
            this.isActive = _data["isActive"];
            this.isDeleted = _data["isDeleted"];
            this.pPrice1 = _data["pPrice1"];
            this.pPrice2 = _data["pPrice2"];
            this.pPrice3 = _data["pPrice3"];
            this.pPrice4 = _data["pPrice4"];
            this.pPrice5 = _data["pPrice5"];
            this.pPrice6 = _data["pPrice6"];
            this.pPrice7 = _data["pPrice7"];
            this.pPrice8 = _data["pPrice8"];
            this.pPrice9 = _data["pPrice9"];
            this.pPrice10 = _data["pPrice10"];
            this.truck_Id = _data["truck_Id"];
        }
    }

    static fromJS(data: any): CreateLTLCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLTLCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["originCity"] = this.originCity;
        data["originState"] = this.originState;
        data["destinationCity"] = this.destinationCity;
        data["destinationState"] = this.destinationState;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        data["pPrice1"] = this.pPrice1;
        data["pPrice2"] = this.pPrice2;
        data["pPrice3"] = this.pPrice3;
        data["pPrice4"] = this.pPrice4;
        data["pPrice5"] = this.pPrice5;
        data["pPrice6"] = this.pPrice6;
        data["pPrice7"] = this.pPrice7;
        data["pPrice8"] = this.pPrice8;
        data["pPrice9"] = this.pPrice9;
        data["pPrice10"] = this.pPrice10;
        data["truck_Id"] = this.truck_Id;
        return data; 
    }
}

export interface ICreateLTLCommand {
    id?: number;
    company_Id?: number;
    originCity?: string | undefined;
    originState?: string | undefined;
    destinationCity?: string | undefined;
    destinationState?: string | undefined;
    isActive?: boolean;
    isDeleted?: boolean;
    pPrice1?: number;
    pPrice2?: number;
    pPrice3?: number;
    pPrice4?: number;
    pPrice5?: number;
    pPrice6?: number;
    pPrice7?: number;
    pPrice8?: number;
    pPrice9?: number;
    pPrice10?: number;
    truck_Id?: number;
}

export class RemoveAndDeactiveLTLCommand implements IRemoveAndDeactiveLTLCommand {
    id?: number;
    action?: string | undefined;
    isDeactive?: boolean;
    isDeleted?: string | undefined;

    constructor(data?: IRemoveAndDeactiveLTLCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.action = _data["action"];
            this.isDeactive = _data["isDeactive"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): RemoveAndDeactiveLTLCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveAndDeactiveLTLCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["action"] = this.action;
        data["isDeactive"] = this.isDeactive;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }
}

export interface IRemoveAndDeactiveLTLCommand {
    id?: number;
    action?: string | undefined;
    isDeactive?: boolean;
    isDeleted?: string | undefined;
}

export class GridResultOfWGSMilesDto implements IGridResultOfWGSMilesDto {
    data?: WGSMilesDto[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfWGSMilesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(WGSMilesDto.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfWGSMilesDto {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfWGSMilesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfWGSMilesDto {
    data?: WGSMilesDto[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class WGSMilesDto implements IWGSMilesDto {
    id?: number;
    labelValue?: string | undefined;
    miles?: string | undefined;
    from?: number;
    to?: number;
    minimumCharge?: number;
    truckSize?: string | undefined;
    price?: number;

    constructor(data?: IWGSMilesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.labelValue = _data["labelValue"];
            this.miles = _data["miles"];
            this.from = _data["from"];
            this.to = _data["to"];
            this.minimumCharge = _data["minimumCharge"];
            this.truckSize = _data["truckSize"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): WGSMilesDto {
        data = typeof data === 'object' ? data : {};
        let result = new WGSMilesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["labelValue"] = this.labelValue;
        data["miles"] = this.miles;
        data["from"] = this.from;
        data["to"] = this.to;
        data["minimumCharge"] = this.minimumCharge;
        data["truckSize"] = this.truckSize;
        data["price"] = this.price;
        return data; 
    }
}

export interface IWGSMilesDto {
    id?: number;
    labelValue?: string | undefined;
    miles?: string | undefined;
    from?: number;
    to?: number;
    minimumCharge?: number;
    truckSize?: string | undefined;
    price?: number;
}

export class GridWGSMilesQuery extends GridQuery implements IGridWGSMilesQuery {

    constructor(data?: IGridWGSMilesQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GridWGSMilesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridWGSMilesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGridWGSMilesQuery extends IGridQuery {
}

export class CreateWGSMilesCommand implements ICreateWGSMilesCommand {
    id?: number;
    company_Id?: number;
    price?: number;
    from?: number;
    to?: number;
    labelValue?: string | undefined;
    truck_Id?: number;

    constructor(data?: ICreateWGSMilesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.price = _data["price"];
            this.from = _data["from"];
            this.to = _data["to"];
            this.labelValue = _data["labelValue"];
            this.truck_Id = _data["truck_Id"];
        }
    }

    static fromJS(data: any): CreateWGSMilesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWGSMilesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["price"] = this.price;
        data["from"] = this.from;
        data["to"] = this.to;
        data["labelValue"] = this.labelValue;
        data["truck_Id"] = this.truck_Id;
        return data; 
    }
}

export interface ICreateWGSMilesCommand {
    id?: number;
    company_Id?: number;
    price?: number;
    from?: number;
    to?: number;
    labelValue?: string | undefined;
    truck_Id?: number;
}

export class GridResultOfWGSCompanyWeights implements IGridResultOfWGSCompanyWeights {
    data?: WGSCompanyWeights[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfWGSCompanyWeights) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(WGSCompanyWeights.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfWGSCompanyWeights {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfWGSCompanyWeights();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfWGSCompanyWeights {
    data?: WGSCompanyWeights[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class GridWGSWeightQuery extends GridQuery implements IGridWGSWeightQuery {

    constructor(data?: IGridWGSWeightQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GridWGSWeightQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridWGSWeightQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGridWGSWeightQuery extends IGridQuery {
}

export class CreateWGSWeightCommand implements ICreateWGSWeightCommand {
    id?: number;
    company_Id?: number;
    from?: number;
    to?: number;
    labelValue?: string | undefined;

    constructor(data?: ICreateWGSWeightCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.from = _data["from"];
            this.to = _data["to"];
            this.labelValue = _data["labelValue"];
        }
    }

    static fromJS(data: any): CreateWGSWeightCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWGSWeightCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["from"] = this.from;
        data["to"] = this.to;
        data["labelValue"] = this.labelValue;
        return data; 
    }
}

export interface ICreateWGSWeightCommand {
    id?: number;
    company_Id?: number;
    from?: number;
    to?: number;
    labelValue?: string | undefined;
}

export class GridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice implements IGridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice {
    miles?: WGSCompanyMiles[] | undefined;
    weights?: WGSCompanyWeights[] | undefined;
    weightPrice?: WGSCompanyPrice[] | undefined;

    constructor(data?: IGridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["miles"])) {
                this.miles = [] as any;
                for (let item of _data["miles"])
                    this.miles!.push(WGSCompanyMiles.fromJS(item));
            }
            if (Array.isArray(_data["weights"])) {
                this.weights = [] as any;
                for (let item of _data["weights"])
                    this.weights!.push(WGSCompanyWeights.fromJS(item));
            }
            if (Array.isArray(_data["weightPrice"])) {
                this.weightPrice = [] as any;
                for (let item of _data["weightPrice"])
                    this.weightPrice!.push(WGSCompanyPrice.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice {
        data = typeof data === 'object' ? data : {};
        let result = new GridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.miles)) {
            data["miles"] = [];
            for (let item of this.miles)
                data["miles"].push(item.toJSON());
        }
        if (Array.isArray(this.weights)) {
            data["weights"] = [];
            for (let item of this.weights)
                data["weights"].push(item.toJSON());
        }
        if (Array.isArray(this.weightPrice)) {
            data["weightPrice"] = [];
            for (let item of this.weightPrice)
                data["weightPrice"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGridWGSResultOfWGSCompanyMilesAndWGSCompanyWeightsAndWGSCompanyPrice {
    miles?: WGSCompanyMiles[] | undefined;
    weights?: WGSCompanyWeights[] | undefined;
    weightPrice?: WGSCompanyPrice[] | undefined;
}

export class GridWGSQuery extends GridQuery implements IGridWGSQuery {

    constructor(data?: IGridWGSQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GridWGSQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridWGSQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGridWGSQuery extends IGridQuery {
}

export class UpdateWGSWeightPricesCommand implements IUpdateWGSWeightPricesCommand {
    id?: number;
    price?: number;

    constructor(data?: IUpdateWGSWeightPricesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): UpdateWGSWeightPricesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateWGSWeightPricesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["price"] = this.price;
        return data; 
    }
}

export interface IUpdateWGSWeightPricesCommand {
    id?: number;
    price?: number;
}

export class GridResultOfFreightCompanyCodes implements IGridResultOfFreightCompanyCodes {
    data?: FreightCompanyCodes[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfFreightCompanyCodes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(FreightCompanyCodes.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfFreightCompanyCodes {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfFreightCompanyCodes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfFreightCompanyCodes {
    data?: FreightCompanyCodes[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class GridFreightCodeQuery extends GridQuery implements IGridFreightCodeQuery {

    constructor(data?: IGridFreightCodeQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GridFreightCodeQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridFreightCodeQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGridFreightCodeQuery extends IGridQuery {
}

export class FreightCodeCommand implements IFreightCodeCommand {
    id?: number;
    freightCategory_Id?: number;
    company_Id?: number;
    name?: string | undefined;
    shortDescription?: string | undefined;
    description?: string | undefined;
    defaultPrice?: number;
    isDeleted?: boolean;

    constructor(data?: IFreightCodeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.freightCategory_Id = _data["freightCategory_Id"];
            this.company_Id = _data["company_Id"];
            this.name = _data["name"];
            this.shortDescription = _data["shortDescription"];
            this.description = _data["description"];
            this.defaultPrice = _data["defaultPrice"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): FreightCodeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new FreightCodeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["freightCategory_Id"] = this.freightCategory_Id;
        data["company_Id"] = this.company_Id;
        data["name"] = this.name;
        data["shortDescription"] = this.shortDescription;
        data["description"] = this.description;
        data["defaultPrice"] = this.defaultPrice;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }
}

export interface IFreightCodeCommand {
    id?: number;
    freightCategory_Id?: number;
    company_Id?: number;
    name?: string | undefined;
    shortDescription?: string | undefined;
    description?: string | undefined;
    defaultPrice?: number;
    isDeleted?: boolean;
}

export class RemoveFreightCodeCommand implements IRemoveFreightCodeCommand {
    freightCodeId?: number;

    constructor(data?: IRemoveFreightCodeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.freightCodeId = _data["freightCodeId"];
        }
    }

    static fromJS(data: any): RemoveFreightCodeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveFreightCodeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["freightCodeId"] = this.freightCodeId;
        return data; 
    }
}

export interface IRemoveFreightCodeCommand {
    freightCodeId?: number;
}

export class GridResultOfWGSAccesrailsDto implements IGridResultOfWGSAccesrailsDto {
    data?: WGSAccesrailsDto[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfWGSAccesrailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(WGSAccesrailsDto.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfWGSAccesrailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfWGSAccesrailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfWGSAccesrailsDto {
    data?: WGSAccesrailsDto[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class WGSAccesrailsDto implements IWGSAccesrailsDto {
    id?: number;
    company_Id?: number;
    freightCode_Id?: number;
    isFixedPrice?: boolean;
    defaultPrice?: number;
    freightCode?: string | undefined;

    constructor(data?: IWGSAccesrailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.freightCode_Id = _data["freightCode_Id"];
            this.isFixedPrice = _data["isFixedPrice"];
            this.defaultPrice = _data["defaultPrice"];
            this.freightCode = _data["freightCode"];
        }
    }

    static fromJS(data: any): WGSAccesrailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new WGSAccesrailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["freightCode_Id"] = this.freightCode_Id;
        data["isFixedPrice"] = this.isFixedPrice;
        data["defaultPrice"] = this.defaultPrice;
        data["freightCode"] = this.freightCode;
        return data; 
    }
}

export interface IWGSAccesrailsDto {
    id?: number;
    company_Id?: number;
    freightCode_Id?: number;
    isFixedPrice?: boolean;
    defaultPrice?: number;
    freightCode?: string | undefined;
}

export class GridWGSAccesrailsQuery extends GridQuery implements IGridWGSAccesrailsQuery {

    constructor(data?: IGridWGSAccesrailsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GridWGSAccesrailsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridWGSAccesrailsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGridWGSAccesrailsQuery extends IGridQuery {
}

export class CreateWGSAccesrailsCommand implements ICreateWGSAccesrailsCommand {
    id?: number;
    company_Id?: number;
    freightCode_Id?: number;
    isFixedPrice?: boolean;
    isDeleted?: boolean;
    defaultPrice?: number;

    constructor(data?: ICreateWGSAccesrailsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.freightCode_Id = _data["freightCode_Id"];
            this.isFixedPrice = _data["isFixedPrice"];
            this.isDeleted = _data["isDeleted"];
            this.defaultPrice = _data["defaultPrice"];
        }
    }

    static fromJS(data: any): CreateWGSAccesrailsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWGSAccesrailsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["freightCode_Id"] = this.freightCode_Id;
        data["isFixedPrice"] = this.isFixedPrice;
        data["isDeleted"] = this.isDeleted;
        data["defaultPrice"] = this.defaultPrice;
        return data; 
    }
}

export interface ICreateWGSAccesrailsCommand {
    id?: number;
    company_Id?: number;
    freightCode_Id?: number;
    isFixedPrice?: boolean;
    isDeleted?: boolean;
    defaultPrice?: number;
}

export class RemoveWGSAccesrailsCommand implements IRemoveWGSAccesrailsCommand {
    id?: number;

    constructor(data?: IRemoveWGSAccesrailsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemoveWGSAccesrailsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveWGSAccesrailsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IRemoveWGSAccesrailsCommand {
    id?: number;
}

export class GridResultOfCompanyLinkedClients implements IGridResultOfCompanyLinkedClients {
    data?: CompanyLinkedClients[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfCompanyLinkedClients) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CompanyLinkedClients.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfCompanyLinkedClients {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfCompanyLinkedClients();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfCompanyLinkedClients {
    data?: CompanyLinkedClients[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class GridLinkedClientsQuery extends GridQuery implements IGridLinkedClientsQuery {

    constructor(data?: IGridLinkedClientsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GridLinkedClientsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridLinkedClientsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGridLinkedClientsQuery extends IGridQuery {
}

export class LinkedClientDetailsDto implements ILinkedClientDetailsDto {
    message?: string | undefined;
    clientPreferenceDto?: ClientPreferenceDto[] | undefined;

    constructor(data?: ILinkedClientDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["clientPreferenceDto"])) {
                this.clientPreferenceDto = [] as any;
                for (let item of _data["clientPreferenceDto"])
                    this.clientPreferenceDto!.push(ClientPreferenceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LinkedClientDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new LinkedClientDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.clientPreferenceDto)) {
            data["clientPreferenceDto"] = [];
            for (let item of this.clientPreferenceDto)
                data["clientPreferenceDto"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILinkedClientDetailsDto {
    message?: string | undefined;
    clientPreferenceDto?: ClientPreferenceDto[] | undefined;
}

export class ClientPreferenceDto implements IClientPreferenceDto {
    id?: number;
    name?: string | undefined;

    constructor(data?: IClientPreferenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ClientPreferenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientPreferenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IClientPreferenceDto {
    id?: number;
    name?: string | undefined;
}

export class GetLinkedClientDetailsQuery implements IGetLinkedClientDetailsQuery {
    clientId?: number;
    clientName?: string | undefined;
    collectionPointId?: number;
    collectionPointName?: string | undefined;

    constructor(data?: IGetLinkedClientDetailsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.collectionPointId = _data["collectionPointId"];
            this.collectionPointName = _data["collectionPointName"];
        }
    }

    static fromJS(data: any): GetLinkedClientDetailsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetLinkedClientDetailsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["collectionPointId"] = this.collectionPointId;
        data["collectionPointName"] = this.collectionPointName;
        return data; 
    }
}

export interface IGetLinkedClientDetailsQuery {
    clientId?: number;
    clientName?: string | undefined;
    collectionPointId?: number;
    collectionPointName?: string | undefined;
}

export class CreateLinkedClientsCommand implements ICreateLinkedClientsCommand {
    id?: number;
    company_Id?: number;
    clientId?: number;
    clientName?: string | undefined;
    collectionId?: number;
    collectionName?: string | undefined;
    scheduleFrequency?: string | undefined;
    isPrimary?: boolean;
    isSecondary?: boolean;
    approvalRequired?: boolean;
    transportDays?: number;
    fromTime?: string | undefined;
    toTime?: string | undefined;
    freightType?: string | undefined;
    isDeleted?: boolean;

    constructor(data?: ICreateLinkedClientsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.company_Id = _data["company_Id"];
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.collectionId = _data["collectionId"];
            this.collectionName = _data["collectionName"];
            this.scheduleFrequency = _data["scheduleFrequency"];
            this.isPrimary = _data["isPrimary"];
            this.isSecondary = _data["isSecondary"];
            this.approvalRequired = _data["approvalRequired"];
            this.transportDays = _data["transportDays"];
            this.fromTime = _data["fromTime"];
            this.toTime = _data["toTime"];
            this.freightType = _data["freightType"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): CreateLinkedClientsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLinkedClientsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["company_Id"] = this.company_Id;
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["collectionId"] = this.collectionId;
        data["collectionName"] = this.collectionName;
        data["scheduleFrequency"] = this.scheduleFrequency;
        data["isPrimary"] = this.isPrimary;
        data["isSecondary"] = this.isSecondary;
        data["approvalRequired"] = this.approvalRequired;
        data["transportDays"] = this.transportDays;
        data["fromTime"] = this.fromTime;
        data["toTime"] = this.toTime;
        data["freightType"] = this.freightType;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }
}

export interface ICreateLinkedClientsCommand {
    id?: number;
    company_Id?: number;
    clientId?: number;
    clientName?: string | undefined;
    collectionId?: number;
    collectionName?: string | undefined;
    scheduleFrequency?: string | undefined;
    isPrimary?: boolean;
    isSecondary?: boolean;
    approvalRequired?: boolean;
    transportDays?: number;
    fromTime?: string | undefined;
    toTime?: string | undefined;
    freightType?: string | undefined;
    isDeleted?: boolean;
}

export class RemoveLinkedClientCommand implements IRemoveLinkedClientCommand {
    linkedId?: number;

    constructor(data?: IRemoveLinkedClientCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.linkedId = _data["linkedId"];
        }
    }

    static fromJS(data: any): RemoveLinkedClientCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveLinkedClientCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["linkedId"] = this.linkedId;
        return data; 
    }
}

export interface IRemoveLinkedClientCommand {
    linkedId?: number;
}

export class InsertLabourQuoteCommand implements IInsertLabourQuoteCommand {
    companyId?: number;
    labourCost?: number;

    constructor(data?: IInsertLabourQuoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"];
            this.labourCost = _data["labourCost"];
        }
    }

    static fromJS(data: any): InsertLabourQuoteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertLabourQuoteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["labourCost"] = this.labourCost;
        return data; 
    }
}

export interface IInsertLabourQuoteCommand {
    companyId?: number;
    labourCost?: number;
}

export class GridResultOfCompanyDocuments implements IGridResultOfCompanyDocuments {
    data?: CompanyDocuments[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfCompanyDocuments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CompanyDocuments.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfCompanyDocuments {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfCompanyDocuments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfCompanyDocuments {
    data?: CompanyDocuments[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class GridCompanyDocumentsQuery extends GridQuery implements IGridCompanyDocumentsQuery {

    constructor(data?: IGridCompanyDocumentsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GridCompanyDocumentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridCompanyDocumentsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGridCompanyDocumentsQuery extends IGridQuery {
}

export class CompanyDocumentsCommand implements ICompanyDocumentsCommand {
    company_Id?: number;
    name?: string | undefined;
    path?: string | undefined;
    type?: string | undefined;

    constructor(data?: ICompanyDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.company_Id = _data["company_Id"];
            this.name = _data["name"];
            this.path = _data["path"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CompanyDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company_Id"] = this.company_Id;
        data["name"] = this.name;
        data["path"] = this.path;
        data["type"] = this.type;
        return data; 
    }
}

export interface ICompanyDocumentsCommand {
    company_Id?: number;
    name?: string | undefined;
    path?: string | undefined;
    type?: string | undefined;
}

export class GridResultOfFreightRates implements IGridResultOfFreightRates {
    data?: FreightRates[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfFreightRates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(FreightRates.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfFreightRates {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfFreightRates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfFreightRates {
    data?: FreightRates[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class FreightRates implements IFreightRates {
    routeId?: number;
    collectionPoint?: string | undefined;
    site?: string | undefined;
    collectionLocation?: string | undefined;
    collectionLocationToolTip?: string | undefined;
    pickUpDate?: string | undefined;
    scheduledDate?: string | undefined;
    freightCharges?: number;
    quote?: number;
    shipmentType?: string | undefined;

    constructor(data?: IFreightRates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.routeId = _data["routeId"];
            this.collectionPoint = _data["collectionPoint"];
            this.site = _data["site"];
            this.collectionLocation = _data["collectionLocation"];
            this.collectionLocationToolTip = _data["collectionLocationToolTip"];
            this.pickUpDate = _data["pickUpDate"];
            this.scheduledDate = _data["scheduledDate"];
            this.freightCharges = _data["freightCharges"];
            this.quote = _data["quote"];
            this.shipmentType = _data["shipmentType"];
        }
    }

    static fromJS(data: any): FreightRates {
        data = typeof data === 'object' ? data : {};
        let result = new FreightRates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["routeId"] = this.routeId;
        data["collectionPoint"] = this.collectionPoint;
        data["site"] = this.site;
        data["collectionLocation"] = this.collectionLocation;
        data["collectionLocationToolTip"] = this.collectionLocationToolTip;
        data["pickUpDate"] = this.pickUpDate;
        data["scheduledDate"] = this.scheduledDate;
        data["freightCharges"] = this.freightCharges;
        data["quote"] = this.quote;
        data["shipmentType"] = this.shipmentType;
        return data; 
    }
}

export interface IFreightRates {
    routeId?: number;
    collectionPoint?: string | undefined;
    site?: string | undefined;
    collectionLocation?: string | undefined;
    collectionLocationToolTip?: string | undefined;
    pickUpDate?: string | undefined;
    scheduledDate?: string | undefined;
    freightCharges?: number;
    quote?: number;
    shipmentType?: string | undefined;
}

export class GetHistoricFreightRatesQuery extends GridQuery implements IGetHistoricFreightRatesQuery {

    constructor(data?: IGetHistoricFreightRatesQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GetHistoricFreightRatesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetHistoricFreightRatesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetHistoricFreightRatesQuery extends IGridQuery {
}

export class LU_Permissions extends AuditableEntity implements ILU_Permissions {
    id?: number;
    name?: string | undefined;
    value?: string | undefined;
    description?: string | undefined;
    freightPermision?: boolean;
    isActive?: boolean;
    freightPermissions?: FreightPermissions[] | undefined;

    constructor(data?: ILU_Permissions) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.description = _data["description"];
            this.freightPermision = _data["freightPermision"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["freightPermissions"])) {
                this.freightPermissions = [] as any;
                for (let item of _data["freightPermissions"])
                    this.freightPermissions!.push(FreightPermissions.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LU_Permissions {
        data = typeof data === 'object' ? data : {};
        let result = new LU_Permissions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["value"] = this.value;
        data["description"] = this.description;
        data["freightPermision"] = this.freightPermision;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.freightPermissions)) {
            data["freightPermissions"] = [];
            for (let item of this.freightPermissions)
                data["freightPermissions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ILU_Permissions extends IAuditableEntity {
    id?: number;
    name?: string | undefined;
    value?: string | undefined;
    description?: string | undefined;
    freightPermision?: boolean;
    isActive?: boolean;
    freightPermissions?: FreightPermissions[] | undefined;
}

export class AddUpdatePermissionsCommand implements IAddUpdatePermissionsCommand {
    freightPermissionIds?: number[] | undefined;
    permissionIds?: number[] | undefined;
    company_Id?: number;

    constructor(data?: IAddUpdatePermissionsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["freightPermissionIds"])) {
                this.freightPermissionIds = [] as any;
                for (let item of _data["freightPermissionIds"])
                    this.freightPermissionIds!.push(item);
            }
            if (Array.isArray(_data["permissionIds"])) {
                this.permissionIds = [] as any;
                for (let item of _data["permissionIds"])
                    this.permissionIds!.push(item);
            }
            this.company_Id = _data["company_Id"];
        }
    }

    static fromJS(data: any): AddUpdatePermissionsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddUpdatePermissionsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.freightPermissionIds)) {
            data["freightPermissionIds"] = [];
            for (let item of this.freightPermissionIds)
                data["freightPermissionIds"].push(item);
        }
        if (Array.isArray(this.permissionIds)) {
            data["permissionIds"] = [];
            for (let item of this.permissionIds)
                data["permissionIds"].push(item);
        }
        data["company_Id"] = this.company_Id;
        return data; 
    }
}

export interface IAddUpdatePermissionsCommand {
    freightPermissionIds?: number[] | undefined;
    permissionIds?: number[] | undefined;
    company_Id?: number;
}

export class GridResultOfTeamMemberDto implements IGridResultOfTeamMemberDto {
    data?: TeamMemberDto[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;

    constructor(data?: IGridResultOfTeamMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TeamMemberDto.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.needHelpCount = _data["needHelpCount"];
        }
    }

    static fromJS(data: any): GridResultOfTeamMemberDto {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfTeamMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["needHelpCount"] = this.needHelpCount;
        return data; 
    }
}

export interface IGridResultOfTeamMemberDto {
    data?: TeamMemberDto[] | undefined;
    total?: number;
    page?: number;
    needHelpCount?: number;
}

export class TeamMemberDto implements ITeamMemberDto {
    id?: number;
    name?: string | undefined;

    constructor(data?: ITeamMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TeamMemberDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ITeamMemberDto {
    id?: number;
    name?: string | undefined;
}

export class GetAllTeamMemberGridQuery extends GridQuery implements IGetAllTeamMemberGridQuery {

    constructor(data?: IGetAllTeamMemberGridQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GetAllTeamMemberGridQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllTeamMemberGridQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllTeamMemberGridQuery extends IGridQuery {
}

export class AddUpdateTeamMemberCommand extends TeamMemberDto implements IAddUpdateTeamMemberCommand {

    constructor(data?: IAddUpdateTeamMemberCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): AddUpdateTeamMemberCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddUpdateTeamMemberCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddUpdateTeamMemberCommand extends ITeamMemberDto {
}

export class RemoveTeamMemberCommand implements IRemoveTeamMemberCommand {
    id?: number;

    constructor(data?: IRemoveTeamMemberCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemoveTeamMemberCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveTeamMemberCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IRemoveTeamMemberCommand {
    id?: number;
}

export class OptionVm implements IOptionVm {
    value?: string | undefined;
    text?: string | undefined;
    receivingTypeID?: number;

    constructor(data?: IOptionVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.text = _data["text"];
            this.receivingTypeID = _data["receivingTypeID"];
        }
    }

    static fromJS(data: any): OptionVm {
        data = typeof data === 'object' ? data : {};
        let result = new OptionVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["text"] = this.text;
        data["receivingTypeID"] = this.receivingTypeID;
        return data; 
    }
}

export interface IOptionVm {
    value?: string | undefined;
    text?: string | undefined;
    receivingTypeID?: number;
}

export class AssignShipmentToTeamMemberCommand implements IAssignShipmentToTeamMemberCommand {
    shipmentId?: number;
    teamMemberId?: number;

    constructor(data?: IAssignShipmentToTeamMemberCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shipmentId = _data["shipmentId"];
            this.teamMemberId = _data["teamMemberId"];
        }
    }

    static fromJS(data: any): AssignShipmentToTeamMemberCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AssignShipmentToTeamMemberCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipmentId"] = this.shipmentId;
        data["teamMemberId"] = this.teamMemberId;
        return data; 
    }
}

export interface IAssignShipmentToTeamMemberCommand {
    shipmentId?: number;
    teamMemberId?: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}